{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "mitour",
  "steps": [
    {
      "file": "Chemical_demo.py",
      "selection": {
        "start": {
          "line": 53,
          "character": 6
        },
        "end": {
          "line": 61,
          "character": 64
        }
      },
      "description": "Añdo ñas acciones y las conexiones de los botones\r\n",
      "contents": "import sys\r\nfrom ast import Lambda\r\nfrom datetime import date\r\nfrom pickle import TRUE\r\nfrom tkinter import Button, Spinbox\r\nfrom pathlib import Path\r\nimport sys, os\r\nfrom PySide6.QtCore import QUrl\r\nfrom PySide6.QtWidgets import QApplication, QMainWindow, QPushButton, QWizard, QWizardPage, QLineEdit, QHBoxLayout, QLabel\r\nfrom PySide6.QtWebEngineWidgets import QWebEngineView\r\nfrom PySide6.QtWebEngineCore import QWebEngineSettings\r\nimport numpy as np\r\nimport pyperclip\r\nimport pyqtgraph as pg\r\nimport pyqtgraph.exporters\r\nfrom mongita import MongitaClientDisk\r\n# pdfrw permite leer y extraer páginas de archivos PDF\r\nfrom pdfrw import PdfReader\r\nfrom pdfrw.buildxobj import pagexobj\r\nfrom pdfrw.toreportlab import makerl\r\nfrom pyqtgraph.Qt import QtCore, QtGui\r\nfrom PySide6.QtGui import QPixmap\r\nfrom PySide6.QtWidgets import (QAbstractItemView, QApplication, QCheckBox,\r\n                               QComboBox, QHBoxLayout, QLabel, QLineEdit,\r\n                               QMainWindow, QPushButton, QSpinBox,\r\n                               QTableWidgetItem, QVBoxLayout, QWizard,\r\n                               QWizardPage)\r\nfrom reportlab.pdfgen.canvas import Canvas\r\n\r\nfrom Chemical import Ui_MainWindow\r\n\r\n # reportlab permite la creación de PDF usando texto y primitivas de dibujo\r\n\r\n        # reportlab permite la creación de PDF usando texto y primitivas de dibujo\r\n    # pdfrw permite leer y extraer páginas de archivos PDF\r\n\r\n\r\n\r\nclass MainWindow(QMainWindow, Ui_MainWindow):\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.setupUi(self)\r\n        self.Dato1f1=\"\"\r\n        self.Dato4f1=\"\"\r\n        self.Dato5f1=\"\"\r\n        self.Dato1f2=\"\"\r\n        self.Dato4f2=\"\"\r\n        self.Dato5f2=\"\"\r\n        \r\n        client=MongitaClientDisk()\r\n        my_db=client.b_db\r\n        self.a_collection=my_db.new_collection\r\n        self.actionPaste.triggered.connect(self.pasteClipboard)\r\n        self.actionCopy.triggered.connect(self.copyClipboard)\r\n        self.actionCut.triggered.connect(self.cutClipboard)\r\n        self.ButtonInsert.clicked.connect(self.insertData)\r\n        self.ButtonRemove.clicked.connect(self.removeData)\r\n        self.ButtonRemove.enterEvent=lambda event: self.otherHide()\r\n        self.ButtonRemove.leaveEvent= lambda event: self.otherShow()\r\n        self.ButtonReplace.clicked.connect(self.updateData)\r\n        self.ButtonFilterInfo.clicked.connect(self.filterTable)\r\n        self.tableEdit.setEditTriggers(QAbstractItemView.NoEditTriggers)\r\n        # Wizar\r\n        self.wizard=QWizard()\r\n        next=self.wizard.button(QWizard.NextButton)\r\n        self.buttoMakeInfo.clicked.connect(self.newWizard)\r\n        self.wizard.setWizardStyle(QWizard.ModernStyle)\r\n        self.wizard.setPixmap(QWizard.WatermarkPixmap,QPixmap('Watermark.png'))\r\n        self.wizard.setPixmap(QWizard.LogoPixmap, QPixmap('Logo.png'))\r\n        self.wizard.setPixmap(QWizard.BannerPixmap, QPixmap('Banner.png'))\r\n\r\n        page1=QWizardPage()\r\n        page1.setTitle('Identificación del usuario')\r\n        page1.setSubTitle('Introduzaca su nombre completo')\r\n        lineEdit=QLineEdit()\r\n        label=QLabel()\r\n        label.setText(\"Nombre completo:\")\r\n        hLayout1=QHBoxLayout(page1)\r\n        hLayout1.addWidget(label)\r\n        hLayout1.addWidget(lineEdit)\r\n        page1.registerField('nombre*', lineEdit,lineEdit.text(), 'textChanged')    \r\n        self.wizard.addPage(page1)\r\n     \r\n        page2=QWizardPage()\r\n        page2.setTitle('Generación del identificador')\r\n        page2.setSubTitle( \"Genere su identificador\")\r\n        next.clicked.connect(lambda:page2.setSubTitle(page1.field('nombre')+\" genere su identificador\")) \r\n        next.clicked.connect(lambda:self.asignaNombre(page1.field('nombre')))\r\n\r\n        self.spin=QSpinBox()\r\n        self.check_box=QCheckBox()\r\n        self.combo=QComboBox()\r\n        self.combo.addItem(\"A\")\r\n        self.combo.addItem(\"B\")\r\n        self.combo.addItem(\"C\")\r\n        self.spin.setMaximum(9)\r\n        self.spin.setMinimum(0)\r\n        label1=QLabel()\r\n        label2=QLabel()\r\n        label1.setText(\"Letra de id: \")\r\n        label2.setText(\"Número de id: \")\r\n        hLayout2=QHBoxLayout(page2)\r\n        hLayout2.addWidget(label1)\r\n        hLayout2.addWidget(self.spin)\r\n        hLayout2.addWidget(label2)\r\n        hLayout2.addWidget(self.combo)\r\n        self.wizard.addPage(page2)\r\n        \r\n        page3 = QWizardPage()\r\n        page3.setTitle('Verificación del idntificador')\r\n        page3.setSubTitle('Verifique su id')\r\n        label3=QLabel()\r\n        next.clicked.connect(lambda:label3.setText(\" Su Id generada es: \"+self.combo.currentText()+\"-\"+str(self.spin.value())+\"   ¿Valores correctos?\"))\r\n        next.clicked.connect(lambda:self.setID())\r\n        dateTimeObj = date.today()\r\n        timestampStr = dateTimeObj.strftime(\"%d-%b-%Y\")\r\n        self.fechaFin=timestampStr\r\n        hLayout3=QHBoxLayout(page3)\r\n        hLayout3.addWidget(label3)\r\n        hLayout3.addWidget(self.check_box)\r\n        self.check_box.mousePressEvent= lambda event: self.conectar()\r\n        self.lineEdit_check=QLineEdit()\r\n        hLayout3.addWidget(self.lineEdit_check)\r\n        self.lineEdit_check.hide()\r\n        page3.registerField('campo_check*', self.lineEdit_check)\r\n        self.wizard.addPage(page3)\r\n\r\n        page4 = QWizardPage()\r\n        page4.setTitle('Generar informe')\r\n        page4.setSubTitle('Terminando el proceso')\r\n        label4=QLabel()\r\n        self.label5=QLabel()\r\n        button4=QPushButton(\"Generar Informe\")\r\n        label4.setText(\"Muchas gracias por su colaboración\")\r\n        self.label5.setText(\"\")\r\n        hLayout4=QVBoxLayout(page4)\r\n        hLayout4.addWidget(label4)\r\n        hLayout4.addWidget(self.label5)\r\n        hLayout4.addWidget(button4)\r\n        page4.setFinalPage(True)\r\n        button4.mousePressEvent= lambda event: self.generaInforme()\r\n        finish = self.wizard.button(QWizard.FinishButton)\r\n        self.wizard.addPage(page4)\r\n\r\n        self.updateTable()\r\n    def setID(self):\r\n        item_select=self.combo.currentText()\r\n        spin_selected=self.spin.value()\r\n        self.idFin=item_select+\"-\"+str(spin_selected)\r\n    def  asignaNombre(self,nombre):\r\n        self.nombreFin=nombre\r\n    def generaInforme(self):\r\n        outfile = \"informe.pdf\"\r\n        template = PdfReader(\"template.pdf\", decompress=False).pages[0]\r\n        template_obj = pagexobj(template)\r\n        canvas = Canvas(outfile)\r\n        xobj_name = makerl(canvas, template_obj)\r\n        canvas.doForm(xobj_name)\r\n        #A4 595 x 842 px\r\n        self.formula_filtradaA=self.lineEditInfo1.text()\r\n        self.formula_filtradaB=self.lineEditInfo2.text()\r\n        numCF1=self.count_char(self.formula_filtradaA,'C')\r\n        numHF1=self.count_char(self.formula_filtradaA,'H')\r\n        numCF2=self.count_char(self.formula_filtradaB,'C')\r\n        numHF2=self.count_char(self.formula_filtradaB,'H')\r\n        self.y1=[numCF1]\r\n        self.y2=[numHF1]\r\n        self.y1B=[numCF2]\r\n        self.y2B=[numHF2]\r\n        self.masa_molar_f1=(numCF1*4)+numHF1\r\n        self.masa_molar_f2=(numCF2*4)+numHF2\r\n\r\n        canvas.drawString(318, 660, self.idFin)\r\n        canvas.drawString(170, 603, self.nombreFin)\r\n        canvas.drawString(110, 632, self.fechaFin)\r\n        canvas.drawString(50, 520, self.textEdit.toPlainText())\r\n\r\n        canvas.drawString(355, 418, self.Dato1f1)\r\n        canvas.drawString(400, 391, self.lineEditInfo1.text())\r\n        canvas.drawString(375, 364, str(self.masa_molar_f1))\r\n        canvas.drawString(340, 336, self.Dato4f1)\r\n        canvas.drawString(410, 310, self.Dato5f1)\r\n\r\n        canvas.drawString(355, 273, self.Dato1f2)\r\n        canvas.drawString(400, 245, self.lineEditInfo2.text())\r\n        canvas.drawString(375, 218, str(self.masa_molar_f2))\r\n        canvas.drawString(340, 192, self.Dato4f2)\r\n        canvas.drawString(410, 164, self.Dato5f2)\r\n        canvas.save()\r\n#GRAFICAS###############################################\r\n        win = pg.plot()\r\n        win2=pg.plot()\r\n        win.setWindowTitle('Azul Hidrogeno Rojo Carbono')\r\n        win2.setWindowTitle('Azul Hidrogeno Rojo Carbono')\r\n\r\n        fn = QtGui.QFont()\r\n        fn.setPointSize(15)\r\n        win.getAxis(\"bottom\").setTickFont(fn)\r\n        win.getAxis(\"left\").setTickFont(fn)\r\n        win2.getAxis(\"bottom\").setTickFont(fn)\r\n        win2.getAxis(\"left\").setTickFont(fn)\r\n        x = np.arange(1)\r\n        bg1 = pg.BarGraphItem(x=x, height=self.y1, width=0.6, brush='r')\r\n        bg2= pg.BarGraphItem(x=x+2, height=self.y2, width=0.6, brush='b')\r\n        win.addItem(bg1)\r\n        win.addItem(bg2)\r\n        bg1B = pg.BarGraphItem(x=x, height=self.y1B, width=0.6, brush='r')\r\n        bg2B = pg.BarGraphItem(x=x+2, height=self.y2B, width=0.6, brush='b')\r\n        win2.addItem(bg1B)\r\n        win2.addItem(bg2B)\r\n        plt = win\r\n        pltB = win2\r\n        \r\n        exporter = pg.exporters.ImageExporter(plt.plotItem)\r\n        exporterB = pg.exporters.ImageExporter(pltB.plotItem)\r\n        \r\n        exporter.parameters()['width'] = 170\r\n        exporterB.parameters()['width'] = 170\r\n        exporter.export('graphic.png')\r\n        exporterB.export('graphicB.png')\r\n        outfile = \"informe.pdf\"\r\n        template = PdfReader(\"informe.pdf\", decompress=False).pages[0]\r\n        template_obj = pagexobj(template)\r\n        canvas = Canvas(outfile)\r\n        xobj_name = makerl(canvas, template_obj)\r\n        canvas.doForm(xobj_name)\r\n        canvas.drawImage(\"graphic.png\", 50, 300, width=None,height=None,mask=None)\r\n        canvas.drawImage(\"graphicB.png\", 50, 160, width=None,height=None,mask=None)\r\n\r\n        \r\n        canvas.save()\r\n        self.label5.setText(\"Informe generado con éxito\")\r\n        win.close()\r\n        win2.close()\r\n\r\n\r\n        self.setWindowTitle(\"Mi informe\")\r\n        # QWebEngineView es una vista de una web (vista de un navegador incrustada en una app)\r\n        # Documentación de la clase: https://doc.qt.io/qtforpython/PySide6/QtWebEngineWidgets/QWebEngineView.html\r\n        self.web = QWebEngineView()\r\n        # Para mostrar un PDF, es necesario habilitar los plugins. Los plugins están en https://doc.qt.io/qtforpython/PySide6/QtWebEngineCore/QWebEngineSettings.html#detailed-description\r\n        self.web.settings().setAttribute(QWebEngineSettings.PluginsEnabled, True)\r\n        # Obtenemos la ruta al documento PDF que queremos mostrar (a partir de la carpeta en la que se ejecuta el script)\r\n        #ruta = os.getcwd()\r\n        #rutaConPDF = ruta+\"/template.pdf\"\r\n        # Cargamos el fichero con el protocolo file:// (por eso necesitábamos la ruta completa)\r\n        # Usando http o https también se pueden cargar páginas web\r\n        #self.web.load(QUrl(\"file://\"+rutaConPDF))\r\n        self.setWindowTitle(\"Informe\")\r\n        self.web = QWebEngineView()\r\n        self.web.settings().setAttribute(QWebEngineSettings.PluginsEnabled, True)\r\n        ruta = Path(\"informe.pdf\")\r\n        ruta.absolute().as_uri()\r\n        self.web.load(QUrl(ruta.absolute().as_uri()))\r\n        self.setCentralWidget(self.web)\r\n        self.setCentralWidget(self.web)\r\n\r\n    def count_char(self,formula, char):\r\n        longitud=len(formula)\r\n        count=0\r\n        for  i in range(longitud):\r\n            if(formula[i]==char):\r\n                if(formula[i+1].isdigit() and (i+1)!=longitud):\r\n                    count=count + int(formula[i+1])\r\n                else:\r\n                    count=count + 1\r\n        return count\r\n\r\n\r\n    def conectar(self):\r\n        if(self.check_box.checkState()==False):\r\n            self.check_box.setChecked(True)\r\n            self.lineEdit_check.setText(\"ok\")\r\n        else:\r\n            self.check_box.setChecked(False)\r\n            self.lineEdit_check.setText(\"\")\r\n\r\n    def otherHide(self):\r\n        self.lineEdit_2.hide()\r\n        self.lineEdit_3.hide()\r\n        self.lineEdit_4.hide()\r\n        self.label_field2.hide()\r\n        self.label_field3.hide()\r\n        self.label_field4.setText(\"\")\r\n\r\n    def otherShow(self):\r\n        self.lineEdit_2.show()\r\n        self.label_field2.show()\r\n        self.lineEdit_3.show()\r\n        self.label_field3.show()\r\n        self.lineEdit_4.show()\r\n        self.label_field4.setText(\"Tipo: \")\r\n    def getFocus(self):\r\n        if(self.lineEdit_1.hasFocus() == True):\r\n            return self.lineEdit_1\r\n        if(self.lineEdit_2.hasFocus() == True):\r\n            return self.lineEdit_2\r\n        if(self.lineEdit_3.hasFocus() == True):\r\n            return self.lineEdit_3\r\n        if(self.lineEdit_4.hasFocus() == True):\r\n            return self.lineEdit_4\r\n        if(self.lineEditFilter.hasFocus() == True):\r\n            return self.lineEditFilter\r\n        if(self.lineEditInfo1.hasFocus() == True):\r\n            return self.lineEditInfo1\r\n        if(self.lineEditInfo2.hasFocus() == True):\r\n            return self.lineEditInfo2\r\n\r\n    def copyClipboard(self):\r\n        lineEditFocus = self.getFocus()\r\n        text = lineEditFocus.text()\r\n        textCopyOK = pyperclip.copy(text)\r\n\r\n    def cutClipboard(self):\r\n        lineEditFocus = self.getFocus()\r\n        text = lineEditFocus.text()\r\n        textCopyOK = pyperclip.copy(text)\r\n        lineEditFocus.setText(\"\")\r\n\r\n    def pasteClipboard(self):\r\n        lineEditFocus = self.getFocus()\r\n        lineEditFocus.setText(pyperclip.paste())\r\n\r\n    def removeData(self):\r\n        self.a_collection.delete_one({\"_id\": self.lineEdit_1.text()})\r\n        self.updateTable()\r\n    def newWizard(self):\r\n        campo=str(\"Fórmula química\")\r\n        valor=self.lineEditInfo1.text()\r\n        query={campo: valor}\r\n        campo2=str(\"Fórmula química\")\r\n        valor2=self.lineEditInfo2.text()\r\n        query2={campo: valor}\r\n        try:\r\n            for x in self.a_collection.find(query):\r\n                for key, value in x.items():\r\n                    if (key != \"_id\"):\r\n                        if(key==\"Nombre\"):\r\n                            self.Dato1f1=value\r\n                        if(key==\"Tipo\"):\r\n                            self.Dato4f1=value\r\n                        if(key==\"Punto de ebullición\"):\r\n                                    self.Dato5f1=value\r\n                for x in self.a_collection.find(query2):\r\n                        for key, value in x.items():\r\n                            if (key != \"_id\"):\r\n                                if(key==\"Nombre\"):\r\n                                    self.Dato1f2=value\r\n                                if(key==\"Tipo\"):\r\n                                    self.Dato4f2=value\r\n                                if(key==\"Punto de ebullición\"):\r\n                                    self.Dato5f2=value\r\n        except Exception as e:\r\n            raise e\r\n\r\n        self.wizard.activateWindow()\r\n        self.wizard.raise_()\r\n        self.wizard.show()\r\n        self.showMinimized()\r\n\r\n    def insertData(self):\r\n        try:\r\n            self.data_demo = {\"_id\": self.lineEdit_1.text(), \"Nombre\": self.lineEdit_2.text(\r\n            ), \"Fórmula química\": self.lineEdit_1.text(), \"Punto de ebullición\": self.lineEdit_3.text(), \"Tipo\": self.lineEdit_4.text()}\r\n            self.a_collection.insert_one(self.data_demo)\r\n            self.updateTable()\r\n        except:\r\n            print(\"An exception occurred\")\r\n\r\n\r\n    def updateData(self):\r\n        self.a_collection.update_one({\"_id\": self.lineEdit_1.text()},{\"$set\": {\"Nombre\": self.lineEdit_2.text(), \"Fórmula química\": self.lineEdit_1.text(), \"Punto de ebullición\": self.lineEdit_3.text(), \"Tipo\": self.lineEdit_4.text()}})\r\n        self.updateTable()\r\n\r\n    def updateTable(self):\r\n        self.tableFilter.clearContents()\r\n        self.tableEdit.clearContents()\r\n        try:\r\n            iter_length = len([i for i in self.a_collection.find()])\r\n            self.tableEdit.setRowCount(iter_length)\r\n            self.tableFilter.setRowCount(iter_length)\r\n            fila = 0\r\n            columna = 0\r\n            for x in self.a_collection.find():\r\n                for key, value in x.items():\r\n                    if (key != \"_id\"):\r\n                        self.tableEdit.setItem(\r\n                            fila-1, columna, QTableWidgetItem(value))\r\n                        self.tableFilter.setItem(\r\n                            fila-1, columna, QTableWidgetItem(value))\r\n                        columna += 1\r\n                fila += 1\r\n                columna=0\r\n        except Exception as e:\r\n            raise e        \r\n    def filterTable(self):\r\n        self.tableFilter.clearContents()\r\n        fila=0\r\n        columna=0\r\n        campo=str(self.comboBoxFilter.currentText())\r\n        valor=self.lineEditFilter.text()\r\n        query={campo: valor}\r\n        try:\r\n            iter_length=len([i for i in self.a_collection.find()])\r\n            self.tableEdit.setRowCount(iter_length)\r\n            self.tableFilter.setRowCount(iter_length)\r\n            for x in self.a_collection.find(query):\r\n                for key, value in x.items():\r\n                    if (key != \"_id\"):\r\n                        self.tableFilter.setItem(\r\n                            fila, columna, QTableWidgetItem(value))\r\n                        columna += 1\r\n                fila += 1\r\n                columna=0\r\n        except Exception as e:\r\n            raise e\r\n\r\n\r\napp=QApplication(sys.argv)\r\nw=MainWindow()\r\nw.show()\r\napp.exec()\r\n"
    },
    {
      "file": "Chemical_demo.py",
      "selection": {
        "start": {
          "line": 152,
          "character": 5
        },
        "end": {
          "line": 189,
          "character": 22
        }
      },
      "description": "Creo el método para generar el informe",
      "contents": "import sys\r\nfrom ast import Lambda\r\nfrom datetime import date\r\nfrom pickle import TRUE\r\nfrom tkinter import Button, Spinbox\r\nfrom pathlib import Path\r\nimport sys, os\r\nfrom PySide6.QtCore import QUrl\r\nfrom PySide6.QtWidgets import QApplication, QMainWindow, QPushButton, QWizard, QWizardPage, QLineEdit, QHBoxLayout, QLabel\r\nfrom PySide6.QtWebEngineWidgets import QWebEngineView\r\nfrom PySide6.QtWebEngineCore import QWebEngineSettings\r\nimport numpy as np\r\nimport pyperclip\r\nimport pyqtgraph as pg\r\nimport pyqtgraph.exporters\r\nfrom mongita import MongitaClientDisk\r\n# pdfrw permite leer y extraer páginas de archivos PDF\r\nfrom pdfrw import PdfReader\r\nfrom pdfrw.buildxobj import pagexobj\r\nfrom pdfrw.toreportlab import makerl\r\nfrom pyqtgraph.Qt import QtCore, QtGui\r\nfrom PySide6.QtGui import QPixmap\r\nfrom PySide6.QtWidgets import (QAbstractItemView, QApplication, QCheckBox,\r\n                               QComboBox, QHBoxLayout, QLabel, QLineEdit,\r\n                               QMainWindow, QPushButton, QSpinBox,\r\n                               QTableWidgetItem, QVBoxLayout, QWizard,\r\n                               QWizardPage)\r\nfrom reportlab.pdfgen.canvas import Canvas\r\n\r\nfrom Chemical import Ui_MainWindow\r\n\r\n # reportlab permite la creación de PDF usando texto y primitivas de dibujo\r\n\r\n        # reportlab permite la creación de PDF usando texto y primitivas de dibujo\r\n    # pdfrw permite leer y extraer páginas de archivos PDF\r\n\r\n\r\n\r\nclass MainWindow(QMainWindow, Ui_MainWindow):\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.setupUi(self)\r\n        self.Dato1f1=\"\"\r\n        self.Dato4f1=\"\"\r\n        self.Dato5f1=\"\"\r\n        self.Dato1f2=\"\"\r\n        self.Dato4f2=\"\"\r\n        self.Dato5f2=\"\"\r\n        \r\n        client=MongitaClientDisk()\r\n        my_db=client.b_db\r\n        self.a_collection=my_db.new_collection\r\n        self.actionPaste.triggered.connect(self.pasteClipboard)\r\n        self.actionCopy.triggered.connect(self.copyClipboard)\r\n        self.actionCut.triggered.connect(self.cutClipboard)\r\n        self.ButtonInsert.clicked.connect(self.insertData)\r\n        self.ButtonRemove.clicked.connect(self.removeData)\r\n        self.ButtonRemove.enterEvent=lambda event: self.otherHide()\r\n        self.ButtonRemove.leaveEvent= lambda event: self.otherShow()\r\n        self.ButtonReplace.clicked.connect(self.updateData)\r\n        self.ButtonFilterInfo.clicked.connect(self.filterTable)\r\n        self.tableEdit.setEditTriggers(QAbstractItemView.NoEditTriggers)\r\n        # Wizar\r\n        self.wizard=QWizard()\r\n        next=self.wizard.button(QWizard.NextButton)\r\n        self.buttoMakeInfo.clicked.connect(self.newWizard)\r\n        self.wizard.setWizardStyle(QWizard.ModernStyle)\r\n        self.wizard.setPixmap(QWizard.WatermarkPixmap,QPixmap('Watermark.png'))\r\n        self.wizard.setPixmap(QWizard.LogoPixmap, QPixmap('Logo.png'))\r\n        self.wizard.setPixmap(QWizard.BannerPixmap, QPixmap('Banner.png'))\r\n\r\n        page1=QWizardPage()\r\n        page1.setTitle('Identificación del usuario')\r\n        page1.setSubTitle('Introduzaca su nombre completo')\r\n        lineEdit=QLineEdit()\r\n        label=QLabel()\r\n        label.setText(\"Nombre completo:\")\r\n        hLayout1=QHBoxLayout(page1)\r\n        hLayout1.addWidget(label)\r\n        hLayout1.addWidget(lineEdit)\r\n        page1.registerField('nombre*', lineEdit,lineEdit.text(), 'textChanged')    \r\n        self.wizard.addPage(page1)\r\n     \r\n        page2=QWizardPage()\r\n        page2.setTitle('Generación del identificador')\r\n        page2.setSubTitle( \"Genere su identificador\")\r\n        next.clicked.connect(lambda:page2.setSubTitle(page1.field('nombre')+\" genere su identificador\")) \r\n        next.clicked.connect(lambda:self.asignaNombre(page1.field('nombre')))\r\n\r\n        self.spin=QSpinBox()\r\n        self.check_box=QCheckBox()\r\n        self.combo=QComboBox()\r\n        self.combo.addItem(\"A\")\r\n        self.combo.addItem(\"B\")\r\n        self.combo.addItem(\"C\")\r\n        self.spin.setMaximum(9)\r\n        self.spin.setMinimum(0)\r\n        label1=QLabel()\r\n        label2=QLabel()\r\n        label1.setText(\"Letra de id: \")\r\n        label2.setText(\"Número de id: \")\r\n        hLayout2=QHBoxLayout(page2)\r\n        hLayout2.addWidget(label1)\r\n        hLayout2.addWidget(self.spin)\r\n        hLayout2.addWidget(label2)\r\n        hLayout2.addWidget(self.combo)\r\n        self.wizard.addPage(page2)\r\n        \r\n        page3 = QWizardPage()\r\n        page3.setTitle('Verificación del idntificador')\r\n        page3.setSubTitle('Verifique su id')\r\n        label3=QLabel()\r\n        next.clicked.connect(lambda:label3.setText(\" Su Id generada es: \"+self.combo.currentText()+\"-\"+str(self.spin.value())+\"   ¿Valores correctos?\"))\r\n        next.clicked.connect(lambda:self.setID())\r\n        dateTimeObj = date.today()\r\n        timestampStr = dateTimeObj.strftime(\"%d-%b-%Y\")\r\n        self.fechaFin=timestampStr\r\n        hLayout3=QHBoxLayout(page3)\r\n        hLayout3.addWidget(label3)\r\n        hLayout3.addWidget(self.check_box)\r\n        self.check_box.mousePressEvent= lambda event: self.conectar()\r\n        self.lineEdit_check=QLineEdit()\r\n        hLayout3.addWidget(self.lineEdit_check)\r\n        self.lineEdit_check.hide()\r\n        page3.registerField('campo_check*', self.lineEdit_check)\r\n        self.wizard.addPage(page3)\r\n\r\n        page4 = QWizardPage()\r\n        page4.setTitle('Generar informe')\r\n        page4.setSubTitle('Terminando el proceso')\r\n        label4=QLabel()\r\n        self.label5=QLabel()\r\n        button4=QPushButton(\"Generar Informe\")\r\n        label4.setText(\"Muchas gracias por su colaboración\")\r\n        self.label5.setText(\"\")\r\n        hLayout4=QVBoxLayout(page4)\r\n        hLayout4.addWidget(label4)\r\n        hLayout4.addWidget(self.label5)\r\n        hLayout4.addWidget(button4)\r\n        page4.setFinalPage(True)\r\n        button4.mousePressEvent= lambda event: self.generaInforme()\r\n        finish = self.wizard.button(QWizard.FinishButton)\r\n        self.wizard.addPage(page4)\r\n\r\n        self.updateTable()\r\n    def setID(self):\r\n        item_select=self.combo.currentText()\r\n        spin_selected=self.spin.value()\r\n        self.idFin=item_select+\"-\"+str(spin_selected)\r\n    def  asignaNombre(self,nombre):\r\n        self.nombreFin=nombre\r\n    def generaInforme(self):\r\n        outfile = \"informe.pdf\"\r\n        template = PdfReader(\"template.pdf\", decompress=False).pages[0]\r\n        template_obj = pagexobj(template)\r\n        canvas = Canvas(outfile)\r\n        xobj_name = makerl(canvas, template_obj)\r\n        canvas.doForm(xobj_name)\r\n        #A4 595 x 842 px\r\n        self.formula_filtradaA=self.lineEditInfo1.text()\r\n        self.formula_filtradaB=self.lineEditInfo2.text()\r\n        numCF1=self.count_char(self.formula_filtradaA,'C')\r\n        numHF1=self.count_char(self.formula_filtradaA,'H')\r\n        numCF2=self.count_char(self.formula_filtradaB,'C')\r\n        numHF2=self.count_char(self.formula_filtradaB,'H')\r\n        self.y1=[numCF1]\r\n        self.y2=[numHF1]\r\n        self.y1B=[numCF2]\r\n        self.y2B=[numHF2]\r\n        self.masa_molar_f1=(numCF1*4)+numHF1\r\n        self.masa_molar_f2=(numCF2*4)+numHF2\r\n\r\n        canvas.drawString(318, 660, self.idFin)\r\n        canvas.drawString(170, 603, self.nombreFin)\r\n        canvas.drawString(110, 632, self.fechaFin)\r\n        canvas.drawString(50, 520, self.textEdit.toPlainText())\r\n\r\n        canvas.drawString(355, 418, self.Dato1f1)\r\n        canvas.drawString(400, 391, self.lineEditInfo1.text())\r\n        canvas.drawString(375, 364, str(self.masa_molar_f1))\r\n        canvas.drawString(340, 336, self.Dato4f1)\r\n        canvas.drawString(410, 310, self.Dato5f1)\r\n\r\n        canvas.drawString(355, 273, self.Dato1f2)\r\n        canvas.drawString(400, 245, self.lineEditInfo2.text())\r\n        canvas.drawString(375, 218, str(self.masa_molar_f2))\r\n        canvas.drawString(340, 192, self.Dato4f2)\r\n        canvas.drawString(410, 164, self.Dato5f2)\r\n        canvas.save()\r\n#GRAFICAS###############################################\r\n        win = pg.plot()\r\n        win2=pg.plot()\r\n        win.setWindowTitle('Azul Hidrogeno Rojo Carbono')\r\n        win2.setWindowTitle('Azul Hidrogeno Rojo Carbono')\r\n\r\n        fn = QtGui.QFont()\r\n        fn.setPointSize(15)\r\n        win.getAxis(\"bottom\").setTickFont(fn)\r\n        win.getAxis(\"left\").setTickFont(fn)\r\n        win2.getAxis(\"bottom\").setTickFont(fn)\r\n        win2.getAxis(\"left\").setTickFont(fn)\r\n        x = np.arange(1)\r\n        bg1 = pg.BarGraphItem(x=x, height=self.y1, width=0.6, brush='r')\r\n        bg2= pg.BarGraphItem(x=x+2, height=self.y2, width=0.6, brush='b')\r\n        win.addItem(bg1)\r\n        win.addItem(bg2)\r\n        bg1B = pg.BarGraphItem(x=x, height=self.y1B, width=0.6, brush='r')\r\n        bg2B = pg.BarGraphItem(x=x+2, height=self.y2B, width=0.6, brush='b')\r\n        win2.addItem(bg1B)\r\n        win2.addItem(bg2B)\r\n        plt = win\r\n        pltB = win2\r\n        \r\n        exporter = pg.exporters.ImageExporter(plt.plotItem)\r\n        exporterB = pg.exporters.ImageExporter(pltB.plotItem)\r\n        \r\n        exporter.parameters()['width'] = 170\r\n        exporterB.parameters()['width'] = 170\r\n        exporter.export('graphic.png')\r\n        exporterB.export('graphicB.png')\r\n        outfile = \"informe.pdf\"\r\n        template = PdfReader(\"informe.pdf\", decompress=False).pages[0]\r\n        template_obj = pagexobj(template)\r\n        canvas = Canvas(outfile)\r\n        xobj_name = makerl(canvas, template_obj)\r\n        canvas.doForm(xobj_name)\r\n        canvas.drawImage(\"graphic.png\", 50, 300, width=None,height=None,mask=None)\r\n        canvas.drawImage(\"graphicB.png\", 50, 160, width=None,height=None,mask=None)\r\n\r\n        \r\n        canvas.save()\r\n        self.label5.setText(\"Informe generado con éxito\")\r\n        win.close()\r\n        win2.close()\r\n\r\n\r\n        self.setWindowTitle(\"Mi informe\")\r\n        # QWebEngineView es una vista de una web (vista de un navegador incrustada en una app)\r\n        # Documentación de la clase: https://doc.qt.io/qtforpython/PySide6/QtWebEngineWidgets/QWebEngineView.html\r\n        self.web = QWebEngineView()\r\n        # Para mostrar un PDF, es necesario habilitar los plugins. Los plugins están en https://doc.qt.io/qtforpython/PySide6/QtWebEngineCore/QWebEngineSettings.html#detailed-description\r\n        self.web.settings().setAttribute(QWebEngineSettings.PluginsEnabled, True)\r\n        # Obtenemos la ruta al documento PDF que queremos mostrar (a partir de la carpeta en la que se ejecuta el script)\r\n        #ruta = os.getcwd()\r\n        #rutaConPDF = ruta+\"/template.pdf\"\r\n        # Cargamos el fichero con el protocolo file:// (por eso necesitábamos la ruta completa)\r\n        # Usando http o https también se pueden cargar páginas web\r\n        #self.web.load(QUrl(\"file://\"+rutaConPDF))\r\n        self.setWindowTitle(\"Informe\")\r\n        self.web = QWebEngineView()\r\n        self.web.settings().setAttribute(QWebEngineSettings.PluginsEnabled, True)\r\n        ruta = Path(\"informe.pdf\")\r\n        ruta.absolute().as_uri()\r\n        self.web.load(QUrl(ruta.absolute().as_uri()))\r\n        self.setCentralWidget(self.web)\r\n        self.setCentralWidget(self.web)\r\n\r\n    def count_char(self,formula, char):\r\n        longitud=len(formula)\r\n        count=0\r\n        for  i in range(longitud):\r\n            if(formula[i]==char):\r\n                if(formula[i+1].isdigit() and (i+1)!=longitud):\r\n                    count=count + int(formula[i+1])\r\n                else:\r\n                    count=count + 1\r\n        return count\r\n\r\n\r\n    def conectar(self):\r\n        if(self.check_box.checkState()==False):\r\n            self.check_box.setChecked(True)\r\n            self.lineEdit_check.setText(\"ok\")\r\n        else:\r\n            self.check_box.setChecked(False)\r\n            self.lineEdit_check.setText(\"\")\r\n\r\n    def otherHide(self):\r\n        self.lineEdit_2.hide()\r\n        self.lineEdit_3.hide()\r\n        self.lineEdit_4.hide()\r\n        self.label_field2.hide()\r\n        self.label_field3.hide()\r\n        self.label_field4.setText(\"\")\r\n\r\n    def otherShow(self):\r\n        self.lineEdit_2.show()\r\n        self.label_field2.show()\r\n        self.lineEdit_3.show()\r\n        self.label_field3.show()\r\n        self.lineEdit_4.show()\r\n        self.label_field4.setText(\"Tipo: \")\r\n    def getFocus(self):\r\n        if(self.lineEdit_1.hasFocus() == True):\r\n            return self.lineEdit_1\r\n        if(self.lineEdit_2.hasFocus() == True):\r\n            return self.lineEdit_2\r\n        if(self.lineEdit_3.hasFocus() == True):\r\n            return self.lineEdit_3\r\n        if(self.lineEdit_4.hasFocus() == True):\r\n            return self.lineEdit_4\r\n        if(self.lineEditFilter.hasFocus() == True):\r\n            return self.lineEditFilter\r\n        if(self.lineEditInfo1.hasFocus() == True):\r\n            return self.lineEditInfo1\r\n        if(self.lineEditInfo2.hasFocus() == True):\r\n            return self.lineEditInfo2\r\n\r\n    def copyClipboard(self):\r\n        lineEditFocus = self.getFocus()\r\n        text = lineEditFocus.text()\r\n        textCopyOK = pyperclip.copy(text)\r\n\r\n    def cutClipboard(self):\r\n        lineEditFocus = self.getFocus()\r\n        text = lineEditFocus.text()\r\n        textCopyOK = pyperclip.copy(text)\r\n        lineEditFocus.setText(\"\")\r\n\r\n    def pasteClipboard(self):\r\n        lineEditFocus = self.getFocus()\r\n        lineEditFocus.setText(pyperclip.paste())\r\n\r\n    def removeData(self):\r\n        self.a_collection.delete_one({\"_id\": self.lineEdit_1.text()})\r\n        self.updateTable()\r\n    def newWizard(self):\r\n        campo=str(\"Fórmula química\")\r\n        valor=self.lineEditInfo1.text()\r\n        query={campo: valor}\r\n        campo2=str(\"Fórmula química\")\r\n        valor2=self.lineEditInfo2.text()\r\n        query2={campo: valor}\r\n        try:\r\n            for x in self.a_collection.find(query):\r\n                for key, value in x.items():\r\n                    if (key != \"_id\"):\r\n                        if(key==\"Nombre\"):\r\n                            self.Dato1f1=value\r\n                        if(key==\"Tipo\"):\r\n                            self.Dato4f1=value\r\n                        if(key==\"Punto de ebullición\"):\r\n                                    self.Dato5f1=value\r\n                for x in self.a_collection.find(query2):\r\n                        for key, value in x.items():\r\n                            if (key != \"_id\"):\r\n                                if(key==\"Nombre\"):\r\n                                    self.Dato1f2=value\r\n                                if(key==\"Tipo\"):\r\n                                    self.Dato4f2=value\r\n                                if(key==\"Punto de ebullición\"):\r\n                                    self.Dato5f2=value\r\n        except Exception as e:\r\n            raise e\r\n\r\n        self.wizard.activateWindow()\r\n        self.wizard.raise_()\r\n        self.wizard.show()\r\n        self.showMinimized()\r\n\r\n    def insertData(self):\r\n        try:\r\n            self.data_demo = {\"_id\": self.lineEdit_1.text(), \"Nombre\": self.lineEdit_2.text(\r\n            ), \"Fórmula química\": self.lineEdit_1.text(), \"Punto de ebullición\": self.lineEdit_3.text(), \"Tipo\": self.lineEdit_4.text()}\r\n            self.a_collection.insert_one(self.data_demo)\r\n            self.updateTable()\r\n        except:\r\n            print(\"An exception occurred\")\r\n\r\n\r\n    def updateData(self):\r\n        self.a_collection.update_one({\"_id\": self.lineEdit_1.text()},{\"$set\": {\"Nombre\": self.lineEdit_2.text(), \"Fórmula química\": self.lineEdit_1.text(), \"Punto de ebullición\": self.lineEdit_3.text(), \"Tipo\": self.lineEdit_4.text()}})\r\n        self.updateTable()\r\n\r\n    def updateTable(self):\r\n        self.tableFilter.clearContents()\r\n        self.tableEdit.clearContents()\r\n        try:\r\n            iter_length = len([i for i in self.a_collection.find()])\r\n            self.tableEdit.setRowCount(iter_length)\r\n            self.tableFilter.setRowCount(iter_length)\r\n            fila = 0\r\n            columna = 0\r\n            for x in self.a_collection.find():\r\n                for key, value in x.items():\r\n                    if (key != \"_id\"):\r\n                        self.tableEdit.setItem(\r\n                            fila-1, columna, QTableWidgetItem(value))\r\n                        self.tableFilter.setItem(\r\n                            fila-1, columna, QTableWidgetItem(value))\r\n                        columna += 1\r\n                fila += 1\r\n                columna=0\r\n        except Exception as e:\r\n            raise e        \r\n    def filterTable(self):\r\n        self.tableFilter.clearContents()\r\n        fila=0\r\n        columna=0\r\n        campo=str(self.comboBoxFilter.currentText())\r\n        valor=self.lineEditFilter.text()\r\n        query={campo: valor}\r\n        try:\r\n            iter_length=len([i for i in self.a_collection.find()])\r\n            self.tableEdit.setRowCount(iter_length)\r\n            self.tableFilter.setRowCount(iter_length)\r\n            for x in self.a_collection.find(query):\r\n                for key, value in x.items():\r\n                    if (key != \"_id\"):\r\n                        self.tableFilter.setItem(\r\n                            fila, columna, QTableWidgetItem(value))\r\n                        columna += 1\r\n                fila += 1\r\n                columna=0\r\n        except Exception as e:\r\n            raise e\r\n\r\n\r\napp=QApplication(sys.argv)\r\nw=MainWindow()\r\nw.show()\r\napp.exec()\r\n"
    },
    {
      "file": "Chemical_demo.py",
      "selection": {
        "start": {
          "line": 191,
          "character": 9
        },
        "end": {
          "line": 243,
          "character": 9
        }
      },
      "description": "Genero las gráficas",
      "contents": "import sys\r\nfrom ast import Lambda\r\nfrom datetime import date\r\nfrom pickle import TRUE\r\nfrom tkinter import Button, Spinbox\r\nfrom pathlib import Path\r\nimport sys, os\r\nfrom PySide6.QtCore import QUrl\r\nfrom PySide6.QtWidgets import QApplication, QMainWindow, QPushButton, QWizard, QWizardPage, QLineEdit, QHBoxLayout, QLabel\r\nfrom PySide6.QtWebEngineWidgets import QWebEngineView\r\nfrom PySide6.QtWebEngineCore import QWebEngineSettings\r\nimport numpy as np\r\nimport pyperclip\r\nimport pyqtgraph as pg\r\nimport pyqtgraph.exporters\r\nfrom mongita import MongitaClientDisk\r\n# pdfrw permite leer y extraer páginas de archivos PDF\r\nfrom pdfrw import PdfReader\r\nfrom pdfrw.buildxobj import pagexobj\r\nfrom pdfrw.toreportlab import makerl\r\nfrom pyqtgraph.Qt import QtCore, QtGui\r\nfrom PySide6.QtGui import QPixmap\r\nfrom PySide6.QtWidgets import (QAbstractItemView, QApplication, QCheckBox,\r\n                               QComboBox, QHBoxLayout, QLabel, QLineEdit,\r\n                               QMainWindow, QPushButton, QSpinBox,\r\n                               QTableWidgetItem, QVBoxLayout, QWizard,\r\n                               QWizardPage)\r\nfrom reportlab.pdfgen.canvas import Canvas\r\n\r\nfrom Chemical import Ui_MainWindow\r\n\r\n # reportlab permite la creación de PDF usando texto y primitivas de dibujo\r\n\r\n        # reportlab permite la creación de PDF usando texto y primitivas de dibujo\r\n    # pdfrw permite leer y extraer páginas de archivos PDF\r\n\r\n\r\n\r\nclass MainWindow(QMainWindow, Ui_MainWindow):\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.setupUi(self)\r\n        self.Dato1f1=\"\"\r\n        self.Dato4f1=\"\"\r\n        self.Dato5f1=\"\"\r\n        self.Dato1f2=\"\"\r\n        self.Dato4f2=\"\"\r\n        self.Dato5f2=\"\"\r\n        \r\n        client=MongitaClientDisk()\r\n        my_db=client.b_db\r\n        self.a_collection=my_db.new_collection\r\n        self.actionPaste.triggered.connect(self.pasteClipboard)\r\n        self.actionCopy.triggered.connect(self.copyClipboard)\r\n        self.actionCut.triggered.connect(self.cutClipboard)\r\n        self.ButtonInsert.clicked.connect(self.insertData)\r\n        self.ButtonRemove.clicked.connect(self.removeData)\r\n        self.ButtonRemove.enterEvent=lambda event: self.otherHide()\r\n        self.ButtonRemove.leaveEvent= lambda event: self.otherShow()\r\n        self.ButtonReplace.clicked.connect(self.updateData)\r\n        self.ButtonFilterInfo.clicked.connect(self.filterTable)\r\n        self.tableEdit.setEditTriggers(QAbstractItemView.NoEditTriggers)\r\n        # Wizar\r\n        self.wizard=QWizard()\r\n        next=self.wizard.button(QWizard.NextButton)\r\n        self.buttoMakeInfo.clicked.connect(self.newWizard)\r\n        self.wizard.setWizardStyle(QWizard.ModernStyle)\r\n        self.wizard.setPixmap(QWizard.WatermarkPixmap,QPixmap('Watermark.png'))\r\n        self.wizard.setPixmap(QWizard.LogoPixmap, QPixmap('Logo.png'))\r\n        self.wizard.setPixmap(QWizard.BannerPixmap, QPixmap('Banner.png'))\r\n\r\n        page1=QWizardPage()\r\n        page1.setTitle('Identificación del usuario')\r\n        page1.setSubTitle('Introduzaca su nombre completo')\r\n        lineEdit=QLineEdit()\r\n        label=QLabel()\r\n        label.setText(\"Nombre completo:\")\r\n        hLayout1=QHBoxLayout(page1)\r\n        hLayout1.addWidget(label)\r\n        hLayout1.addWidget(lineEdit)\r\n        page1.registerField('nombre*', lineEdit,lineEdit.text(), 'textChanged')    \r\n        self.wizard.addPage(page1)\r\n     \r\n        page2=QWizardPage()\r\n        page2.setTitle('Generación del identificador')\r\n        page2.setSubTitle( \"Genere su identificador\")\r\n        next.clicked.connect(lambda:page2.setSubTitle(page1.field('nombre')+\" genere su identificador\")) \r\n        next.clicked.connect(lambda:self.asignaNombre(page1.field('nombre')))\r\n\r\n        self.spin=QSpinBox()\r\n        self.check_box=QCheckBox()\r\n        self.combo=QComboBox()\r\n        self.combo.addItem(\"A\")\r\n        self.combo.addItem(\"B\")\r\n        self.combo.addItem(\"C\")\r\n        self.spin.setMaximum(9)\r\n        self.spin.setMinimum(0)\r\n        label1=QLabel()\r\n        label2=QLabel()\r\n        label1.setText(\"Letra de id: \")\r\n        label2.setText(\"Número de id: \")\r\n        hLayout2=QHBoxLayout(page2)\r\n        hLayout2.addWidget(label1)\r\n        hLayout2.addWidget(self.spin)\r\n        hLayout2.addWidget(label2)\r\n        hLayout2.addWidget(self.combo)\r\n        self.wizard.addPage(page2)\r\n        \r\n        page3 = QWizardPage()\r\n        page3.setTitle('Verificación del idntificador')\r\n        page3.setSubTitle('Verifique su id')\r\n        label3=QLabel()\r\n        next.clicked.connect(lambda:label3.setText(\" Su Id generada es: \"+self.combo.currentText()+\"-\"+str(self.spin.value())+\"   ¿Valores correctos?\"))\r\n        next.clicked.connect(lambda:self.setID())\r\n        dateTimeObj = date.today()\r\n        timestampStr = dateTimeObj.strftime(\"%d-%b-%Y\")\r\n        self.fechaFin=timestampStr\r\n        hLayout3=QHBoxLayout(page3)\r\n        hLayout3.addWidget(label3)\r\n        hLayout3.addWidget(self.check_box)\r\n        self.check_box.mousePressEvent= lambda event: self.conectar()\r\n        self.lineEdit_check=QLineEdit()\r\n        hLayout3.addWidget(self.lineEdit_check)\r\n        self.lineEdit_check.hide()\r\n        page3.registerField('campo_check*', self.lineEdit_check)\r\n        self.wizard.addPage(page3)\r\n\r\n        page4 = QWizardPage()\r\n        page4.setTitle('Generar informe')\r\n        page4.setSubTitle('Terminando el proceso')\r\n        label4=QLabel()\r\n        self.label5=QLabel()\r\n        button4=QPushButton(\"Generar Informe\")\r\n        label4.setText(\"Muchas gracias por su colaboración\")\r\n        self.label5.setText(\"\")\r\n        hLayout4=QVBoxLayout(page4)\r\n        hLayout4.addWidget(label4)\r\n        hLayout4.addWidget(self.label5)\r\n        hLayout4.addWidget(button4)\r\n        page4.setFinalPage(True)\r\n        button4.mousePressEvent= lambda event: self.generaInforme()\r\n        finish = self.wizard.button(QWizard.FinishButton)\r\n        self.wizard.addPage(page4)\r\n\r\n        self.updateTable()\r\n    def setID(self):\r\n        item_select=self.combo.currentText()\r\n        spin_selected=self.spin.value()\r\n        self.idFin=item_select+\"-\"+str(spin_selected)\r\n    def  asignaNombre(self,nombre):\r\n        self.nombreFin=nombre\r\n    def generaInforme(self):\r\n        outfile = \"informe.pdf\"\r\n        template = PdfReader(\"template.pdf\", decompress=False).pages[0]\r\n        template_obj = pagexobj(template)\r\n        canvas = Canvas(outfile)\r\n        xobj_name = makerl(canvas, template_obj)\r\n        canvas.doForm(xobj_name)\r\n        #A4 595 x 842 px\r\n        self.formula_filtradaA=self.lineEditInfo1.text()\r\n        self.formula_filtradaB=self.lineEditInfo2.text()\r\n        numCF1=self.count_char(self.formula_filtradaA,'C')\r\n        numHF1=self.count_char(self.formula_filtradaA,'H')\r\n        numCF2=self.count_char(self.formula_filtradaB,'C')\r\n        numHF2=self.count_char(self.formula_filtradaB,'H')\r\n        self.y1=[numCF1]\r\n        self.y2=[numHF1]\r\n        self.y1B=[numCF2]\r\n        self.y2B=[numHF2]\r\n        self.masa_molar_f1=(numCF1*4)+numHF1\r\n        self.masa_molar_f2=(numCF2*4)+numHF2\r\n\r\n        canvas.drawString(318, 660, self.idFin)\r\n        canvas.drawString(170, 603, self.nombreFin)\r\n        canvas.drawString(110, 632, self.fechaFin)\r\n        canvas.drawString(50, 520, self.textEdit.toPlainText())\r\n\r\n        canvas.drawString(355, 418, self.Dato1f1)\r\n        canvas.drawString(400, 391, self.lineEditInfo1.text())\r\n        canvas.drawString(375, 364, str(self.masa_molar_f1))\r\n        canvas.drawString(340, 336, self.Dato4f1)\r\n        canvas.drawString(410, 310, self.Dato5f1)\r\n\r\n        canvas.drawString(355, 273, self.Dato1f2)\r\n        canvas.drawString(400, 245, self.lineEditInfo2.text())\r\n        canvas.drawString(375, 218, str(self.masa_molar_f2))\r\n        canvas.drawString(340, 192, self.Dato4f2)\r\n        canvas.drawString(410, 164, self.Dato5f2)\r\n        canvas.save()\r\n#GRAFICAS###############################################\r\n        win = pg.plot()\r\n        win2=pg.plot()\r\n        win.setWindowTitle('Azul Hidrogeno Rojo Carbono')\r\n        win2.setWindowTitle('Azul Hidrogeno Rojo Carbono')\r\n\r\n        fn = QtGui.QFont()\r\n        fn.setPointSize(15)\r\n        win.getAxis(\"bottom\").setTickFont(fn)\r\n        win.getAxis(\"left\").setTickFont(fn)\r\n        win2.getAxis(\"bottom\").setTickFont(fn)\r\n        win2.getAxis(\"left\").setTickFont(fn)\r\n        x = np.arange(1)\r\n        bg1 = pg.BarGraphItem(x=x, height=self.y1, width=0.6, brush='r')\r\n        bg2= pg.BarGraphItem(x=x+2, height=self.y2, width=0.6, brush='b')\r\n        win.addItem(bg1)\r\n        win.addItem(bg2)\r\n        bg1B = pg.BarGraphItem(x=x, height=self.y1B, width=0.6, brush='r')\r\n        bg2B = pg.BarGraphItem(x=x+2, height=self.y2B, width=0.6, brush='b')\r\n        win2.addItem(bg1B)\r\n        win2.addItem(bg2B)\r\n        plt = win\r\n        pltB = win2\r\n        \r\n        exporter = pg.exporters.ImageExporter(plt.plotItem)\r\n        exporterB = pg.exporters.ImageExporter(pltB.plotItem)\r\n        \r\n        exporter.parameters()['width'] = 170\r\n        exporterB.parameters()['width'] = 170\r\n        exporter.export('graphic.png')\r\n        exporterB.export('graphicB.png')\r\n        outfile = \"informe.pdf\"\r\n        template = PdfReader(\"informe.pdf\", decompress=False).pages[0]\r\n        template_obj = pagexobj(template)\r\n        canvas = Canvas(outfile)\r\n        xobj_name = makerl(canvas, template_obj)\r\n        canvas.doForm(xobj_name)\r\n        canvas.drawImage(\"graphic.png\", 50, 300, width=None,height=None,mask=None)\r\n        canvas.drawImage(\"graphicB.png\", 50, 160, width=None,height=None,mask=None)\r\n\r\n        \r\n        canvas.save()\r\n        self.label5.setText(\"Informe generado con éxito\")\r\n        win.close()\r\n        win2.close()\r\n\r\n\r\n        self.setWindowTitle(\"Mi informe\")\r\n        # QWebEngineView es una vista de una web (vista de un navegador incrustada en una app)\r\n        # Documentación de la clase: https://doc.qt.io/qtforpython/PySide6/QtWebEngineWidgets/QWebEngineView.html\r\n        self.web = QWebEngineView()\r\n        # Para mostrar un PDF, es necesario habilitar los plugins. Los plugins están en https://doc.qt.io/qtforpython/PySide6/QtWebEngineCore/QWebEngineSettings.html#detailed-description\r\n        self.web.settings().setAttribute(QWebEngineSettings.PluginsEnabled, True)\r\n        # Obtenemos la ruta al documento PDF que queremos mostrar (a partir de la carpeta en la que se ejecuta el script)\r\n        #ruta = os.getcwd()\r\n        #rutaConPDF = ruta+\"/template.pdf\"\r\n        # Cargamos el fichero con el protocolo file:// (por eso necesitábamos la ruta completa)\r\n        # Usando http o https también se pueden cargar páginas web\r\n        #self.web.load(QUrl(\"file://\"+rutaConPDF))\r\n        self.setWindowTitle(\"Informe\")\r\n        self.web = QWebEngineView()\r\n        self.web.settings().setAttribute(QWebEngineSettings.PluginsEnabled, True)\r\n        ruta = Path(\"informe.pdf\")\r\n        ruta.absolute().as_uri()\r\n        self.web.load(QUrl(ruta.absolute().as_uri()))\r\n        self.setCentralWidget(self.web)\r\n        self.setCentralWidget(self.web)\r\n\r\n    def count_char(self,formula, char):\r\n        longitud=len(formula)\r\n        count=0\r\n        for  i in range(longitud):\r\n            if(formula[i]==char):\r\n                if(formula[i+1].isdigit() and (i+1)!=longitud):\r\n                    count=count + int(formula[i+1])\r\n                else:\r\n                    count=count + 1\r\n        return count\r\n\r\n\r\n    def conectar(self):\r\n        if(self.check_box.checkState()==False):\r\n            self.check_box.setChecked(True)\r\n            self.lineEdit_check.setText(\"ok\")\r\n        else:\r\n            self.check_box.setChecked(False)\r\n            self.lineEdit_check.setText(\"\")\r\n\r\n    def otherHide(self):\r\n        self.lineEdit_2.hide()\r\n        self.lineEdit_3.hide()\r\n        self.lineEdit_4.hide()\r\n        self.label_field2.hide()\r\n        self.label_field3.hide()\r\n        self.label_field4.setText(\"\")\r\n\r\n    def otherShow(self):\r\n        self.lineEdit_2.show()\r\n        self.label_field2.show()\r\n        self.lineEdit_3.show()\r\n        self.label_field3.show()\r\n        self.lineEdit_4.show()\r\n        self.label_field4.setText(\"Tipo: \")\r\n    def getFocus(self):\r\n        if(self.lineEdit_1.hasFocus() == True):\r\n            return self.lineEdit_1\r\n        if(self.lineEdit_2.hasFocus() == True):\r\n            return self.lineEdit_2\r\n        if(self.lineEdit_3.hasFocus() == True):\r\n            return self.lineEdit_3\r\n        if(self.lineEdit_4.hasFocus() == True):\r\n            return self.lineEdit_4\r\n        if(self.lineEditFilter.hasFocus() == True):\r\n            return self.lineEditFilter\r\n        if(self.lineEditInfo1.hasFocus() == True):\r\n            return self.lineEditInfo1\r\n        if(self.lineEditInfo2.hasFocus() == True):\r\n            return self.lineEditInfo2\r\n\r\n    def copyClipboard(self):\r\n        lineEditFocus = self.getFocus()\r\n        text = lineEditFocus.text()\r\n        textCopyOK = pyperclip.copy(text)\r\n\r\n    def cutClipboard(self):\r\n        lineEditFocus = self.getFocus()\r\n        text = lineEditFocus.text()\r\n        textCopyOK = pyperclip.copy(text)\r\n        lineEditFocus.setText(\"\")\r\n\r\n    def pasteClipboard(self):\r\n        lineEditFocus = self.getFocus()\r\n        lineEditFocus.setText(pyperclip.paste())\r\n\r\n    def removeData(self):\r\n        self.a_collection.delete_one({\"_id\": self.lineEdit_1.text()})\r\n        self.updateTable()\r\n    def newWizard(self):\r\n        campo=str(\"Fórmula química\")\r\n        valor=self.lineEditInfo1.text()\r\n        query={campo: valor}\r\n        campo2=str(\"Fórmula química\")\r\n        valor2=self.lineEditInfo2.text()\r\n        query2={campo: valor}\r\n        try:\r\n            for x in self.a_collection.find(query):\r\n                for key, value in x.items():\r\n                    if (key != \"_id\"):\r\n                        if(key==\"Nombre\"):\r\n                            self.Dato1f1=value\r\n                        if(key==\"Tipo\"):\r\n                            self.Dato4f1=value\r\n                        if(key==\"Punto de ebullición\"):\r\n                                    self.Dato5f1=value\r\n                for x in self.a_collection.find(query2):\r\n                        for key, value in x.items():\r\n                            if (key != \"_id\"):\r\n                                if(key==\"Nombre\"):\r\n                                    self.Dato1f2=value\r\n                                if(key==\"Tipo\"):\r\n                                    self.Dato4f2=value\r\n                                if(key==\"Punto de ebullición\"):\r\n                                    self.Dato5f2=value\r\n        except Exception as e:\r\n            raise e\r\n\r\n        self.wizard.activateWindow()\r\n        self.wizard.raise_()\r\n        self.wizard.show()\r\n        self.showMinimized()\r\n\r\n    def insertData(self):\r\n        try:\r\n            self.data_demo = {\"_id\": self.lineEdit_1.text(), \"Nombre\": self.lineEdit_2.text(\r\n            ), \"Fórmula química\": self.lineEdit_1.text(), \"Punto de ebullición\": self.lineEdit_3.text(), \"Tipo\": self.lineEdit_4.text()}\r\n            self.a_collection.insert_one(self.data_demo)\r\n            self.updateTable()\r\n        except:\r\n            print(\"An exception occurred\")\r\n\r\n\r\n    def updateData(self):\r\n        self.a_collection.update_one({\"_id\": self.lineEdit_1.text()},{\"$set\": {\"Nombre\": self.lineEdit_2.text(), \"Fórmula química\": self.lineEdit_1.text(), \"Punto de ebullición\": self.lineEdit_3.text(), \"Tipo\": self.lineEdit_4.text()}})\r\n        self.updateTable()\r\n\r\n    def updateTable(self):\r\n        self.tableFilter.clearContents()\r\n        self.tableEdit.clearContents()\r\n        try:\r\n            iter_length = len([i for i in self.a_collection.find()])\r\n            self.tableEdit.setRowCount(iter_length)\r\n            self.tableFilter.setRowCount(iter_length)\r\n            fila = 0\r\n            columna = 0\r\n            for x in self.a_collection.find():\r\n                for key, value in x.items():\r\n                    if (key != \"_id\"):\r\n                        self.tableEdit.setItem(\r\n                            fila-1, columna, QTableWidgetItem(value))\r\n                        self.tableFilter.setItem(\r\n                            fila-1, columna, QTableWidgetItem(value))\r\n                        columna += 1\r\n                fila += 1\r\n                columna=0\r\n        except Exception as e:\r\n            raise e        \r\n    def filterTable(self):\r\n        self.tableFilter.clearContents()\r\n        fila=0\r\n        columna=0\r\n        campo=str(self.comboBoxFilter.currentText())\r\n        valor=self.lineEditFilter.text()\r\n        query={campo: valor}\r\n        try:\r\n            iter_length=len([i for i in self.a_collection.find()])\r\n            self.tableEdit.setRowCount(iter_length)\r\n            self.tableFilter.setRowCount(iter_length)\r\n            for x in self.a_collection.find(query):\r\n                for key, value in x.items():\r\n                    if (key != \"_id\"):\r\n                        self.tableFilter.setItem(\r\n                            fila, columna, QTableWidgetItem(value))\r\n                        columna += 1\r\n                fila += 1\r\n                columna=0\r\n        except Exception as e:\r\n            raise e\r\n\r\n\r\napp=QApplication(sys.argv)\r\nw=MainWindow()\r\nw.show()\r\napp.exec()\r\n"
    },
    {
      "file": "Chemical_demo.py",
      "selection": {
        "start": {
          "line": 249,
          "character": 8
        },
        "end": {
          "line": 256,
          "character": 40
        }
      },
      "description": "creo el informe pdf",
      "contents": "import sys\r\nfrom ast import Lambda\r\nfrom datetime import date\r\nfrom pickle import TRUE\r\nfrom tkinter import Button, Spinbox\r\nfrom pathlib import Path\r\nimport sys, os\r\nfrom PySide6.QtCore import QUrl\r\nfrom PySide6.QtWidgets import QApplication, QMainWindow, QPushButton, QWizard, QWizardPage, QLineEdit, QHBoxLayout, QLabel\r\nfrom PySide6.QtWebEngineWidgets import QWebEngineView\r\nfrom PySide6.QtWebEngineCore import QWebEngineSettings\r\nimport numpy as np\r\nimport pyperclip\r\nimport pyqtgraph as pg\r\nimport pyqtgraph.exporters\r\nfrom mongita import MongitaClientDisk\r\n# pdfrw permite leer y extraer páginas de archivos PDF\r\nfrom pdfrw import PdfReader\r\nfrom pdfrw.buildxobj import pagexobj\r\nfrom pdfrw.toreportlab import makerl\r\nfrom pyqtgraph.Qt import QtCore, QtGui\r\nfrom PySide6.QtGui import QPixmap\r\nfrom PySide6.QtWidgets import (QAbstractItemView, QApplication, QCheckBox,\r\n                               QComboBox, QHBoxLayout, QLabel, QLineEdit,\r\n                               QMainWindow, QPushButton, QSpinBox,\r\n                               QTableWidgetItem, QVBoxLayout, QWizard,\r\n                               QWizardPage)\r\nfrom reportlab.pdfgen.canvas import Canvas\r\n\r\nfrom Chemical import Ui_MainWindow\r\n\r\n # reportlab permite la creación de PDF usando texto y primitivas de dibujo\r\n\r\n        # reportlab permite la creación de PDF usando texto y primitivas de dibujo\r\n    # pdfrw permite leer y extraer páginas de archivos PDF\r\n\r\n\r\n\r\nclass MainWindow(QMainWindow, Ui_MainWindow):\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.setupUi(self)\r\n        self.Dato1f1=\"\"\r\n        self.Dato4f1=\"\"\r\n        self.Dato5f1=\"\"\r\n        self.Dato1f2=\"\"\r\n        self.Dato4f2=\"\"\r\n        self.Dato5f2=\"\"\r\n        \r\n        client=MongitaClientDisk()\r\n        my_db=client.b_db\r\n        self.a_collection=my_db.new_collection\r\n        self.actionPaste.triggered.connect(self.pasteClipboard)\r\n        self.actionCopy.triggered.connect(self.copyClipboard)\r\n        self.actionCut.triggered.connect(self.cutClipboard)\r\n        self.ButtonInsert.clicked.connect(self.insertData)\r\n        self.ButtonRemove.clicked.connect(self.removeData)\r\n        self.ButtonRemove.enterEvent=lambda event: self.otherHide()\r\n        self.ButtonRemove.leaveEvent= lambda event: self.otherShow()\r\n        self.ButtonReplace.clicked.connect(self.updateData)\r\n        self.ButtonFilterInfo.clicked.connect(self.filterTable)\r\n        self.tableEdit.setEditTriggers(QAbstractItemView.NoEditTriggers)\r\n        # Wizar\r\n        self.wizard=QWizard()\r\n        next=self.wizard.button(QWizard.NextButton)\r\n        self.buttoMakeInfo.clicked.connect(self.newWizard)\r\n        self.wizard.setWizardStyle(QWizard.ModernStyle)\r\n        self.wizard.setPixmap(QWizard.WatermarkPixmap,QPixmap('Watermark.png'))\r\n        self.wizard.setPixmap(QWizard.LogoPixmap, QPixmap('Logo.png'))\r\n        self.wizard.setPixmap(QWizard.BannerPixmap, QPixmap('Banner.png'))\r\n\r\n        page1=QWizardPage()\r\n        page1.setTitle('Identificación del usuario')\r\n        page1.setSubTitle('Introduzaca su nombre completo')\r\n        lineEdit=QLineEdit()\r\n        label=QLabel()\r\n        label.setText(\"Nombre completo:\")\r\n        hLayout1=QHBoxLayout(page1)\r\n        hLayout1.addWidget(label)\r\n        hLayout1.addWidget(lineEdit)\r\n        page1.registerField('nombre*', lineEdit,lineEdit.text(), 'textChanged')    \r\n        self.wizard.addPage(page1)\r\n     \r\n        page2=QWizardPage()\r\n        page2.setTitle('Generación del identificador')\r\n        page2.setSubTitle( \"Genere su identificador\")\r\n        next.clicked.connect(lambda:page2.setSubTitle(page1.field('nombre')+\" genere su identificador\")) \r\n        next.clicked.connect(lambda:self.asignaNombre(page1.field('nombre')))\r\n\r\n        self.spin=QSpinBox()\r\n        self.check_box=QCheckBox()\r\n        self.combo=QComboBox()\r\n        self.combo.addItem(\"A\")\r\n        self.combo.addItem(\"B\")\r\n        self.combo.addItem(\"C\")\r\n        self.spin.setMaximum(9)\r\n        self.spin.setMinimum(0)\r\n        label1=QLabel()\r\n        label2=QLabel()\r\n        label1.setText(\"Letra de id: \")\r\n        label2.setText(\"Número de id: \")\r\n        hLayout2=QHBoxLayout(page2)\r\n        hLayout2.addWidget(label1)\r\n        hLayout2.addWidget(self.spin)\r\n        hLayout2.addWidget(label2)\r\n        hLayout2.addWidget(self.combo)\r\n        self.wizard.addPage(page2)\r\n        \r\n        page3 = QWizardPage()\r\n        page3.setTitle('Verificación del idntificador')\r\n        page3.setSubTitle('Verifique su id')\r\n        label3=QLabel()\r\n        next.clicked.connect(lambda:label3.setText(\" Su Id generada es: \"+self.combo.currentText()+\"-\"+str(self.spin.value())+\"   ¿Valores correctos?\"))\r\n        next.clicked.connect(lambda:self.setID())\r\n        dateTimeObj = date.today()\r\n        timestampStr = dateTimeObj.strftime(\"%d-%b-%Y\")\r\n        self.fechaFin=timestampStr\r\n        hLayout3=QHBoxLayout(page3)\r\n        hLayout3.addWidget(label3)\r\n        hLayout3.addWidget(self.check_box)\r\n        self.check_box.mousePressEvent= lambda event: self.conectar()\r\n        self.lineEdit_check=QLineEdit()\r\n        hLayout3.addWidget(self.lineEdit_check)\r\n        self.lineEdit_check.hide()\r\n        page3.registerField('campo_check*', self.lineEdit_check)\r\n        self.wizard.addPage(page3)\r\n\r\n        page4 = QWizardPage()\r\n        page4.setTitle('Generar informe')\r\n        page4.setSubTitle('Terminando el proceso')\r\n        label4=QLabel()\r\n        self.label5=QLabel()\r\n        button4=QPushButton(\"Generar Informe\")\r\n        label4.setText(\"Muchas gracias por su colaboración\")\r\n        self.label5.setText(\"\")\r\n        hLayout4=QVBoxLayout(page4)\r\n        hLayout4.addWidget(label4)\r\n        hLayout4.addWidget(self.label5)\r\n        hLayout4.addWidget(button4)\r\n        page4.setFinalPage(True)\r\n        button4.mousePressEvent= lambda event: self.generaInforme()\r\n        finish = self.wizard.button(QWizard.FinishButton)\r\n        self.wizard.addPage(page4)\r\n\r\n        self.updateTable()\r\n    def setID(self):\r\n        item_select=self.combo.currentText()\r\n        spin_selected=self.spin.value()\r\n        self.idFin=item_select+\"-\"+str(spin_selected)\r\n    def  asignaNombre(self,nombre):\r\n        self.nombreFin=nombre\r\n    def generaInforme(self):\r\n        outfile = \"informe.pdf\"\r\n        template = PdfReader(\"template.pdf\", decompress=False).pages[0]\r\n        template_obj = pagexobj(template)\r\n        canvas = Canvas(outfile)\r\n        xobj_name = makerl(canvas, template_obj)\r\n        canvas.doForm(xobj_name)\r\n        #A4 595 x 842 px\r\n        self.formula_filtradaA=self.lineEditInfo1.text()\r\n        self.formula_filtradaB=self.lineEditInfo2.text()\r\n        numCF1=self.count_char(self.formula_filtradaA,'C')\r\n        numHF1=self.count_char(self.formula_filtradaA,'H')\r\n        numCF2=self.count_char(self.formula_filtradaB,'C')\r\n        numHF2=self.count_char(self.formula_filtradaB,'H')\r\n        self.y1=[numCF1]\r\n        self.y2=[numHF1]\r\n        self.y1B=[numCF2]\r\n        self.y2B=[numHF2]\r\n        self.masa_molar_f1=(numCF1*4)+numHF1\r\n        self.masa_molar_f2=(numCF2*4)+numHF2\r\n\r\n        canvas.drawString(318, 660, self.idFin)\r\n        canvas.drawString(170, 603, self.nombreFin)\r\n        canvas.drawString(110, 632, self.fechaFin)\r\n        canvas.drawString(50, 520, self.textEdit.toPlainText())\r\n\r\n        canvas.drawString(355, 418, self.Dato1f1)\r\n        canvas.drawString(400, 391, self.lineEditInfo1.text())\r\n        canvas.drawString(375, 364, str(self.masa_molar_f1))\r\n        canvas.drawString(340, 336, self.Dato4f1)\r\n        canvas.drawString(410, 310, self.Dato5f1)\r\n\r\n        canvas.drawString(355, 273, self.Dato1f2)\r\n        canvas.drawString(400, 245, self.lineEditInfo2.text())\r\n        canvas.drawString(375, 218, str(self.masa_molar_f2))\r\n        canvas.drawString(340, 192, self.Dato4f2)\r\n        canvas.drawString(410, 164, self.Dato5f2)\r\n        canvas.save()\r\n#GRAFICAS###############################################\r\n        win = pg.plot()\r\n        win2=pg.plot()\r\n        win.setWindowTitle('Azul Hidrogeno Rojo Carbono')\r\n        win2.setWindowTitle('Azul Hidrogeno Rojo Carbono')\r\n\r\n        fn = QtGui.QFont()\r\n        fn.setPointSize(15)\r\n        win.getAxis(\"bottom\").setTickFont(fn)\r\n        win.getAxis(\"left\").setTickFont(fn)\r\n        win2.getAxis(\"bottom\").setTickFont(fn)\r\n        win2.getAxis(\"left\").setTickFont(fn)\r\n        x = np.arange(1)\r\n        bg1 = pg.BarGraphItem(x=x, height=self.y1, width=0.6, brush='r')\r\n        bg2= pg.BarGraphItem(x=x+2, height=self.y2, width=0.6, brush='b')\r\n        win.addItem(bg1)\r\n        win.addItem(bg2)\r\n        bg1B = pg.BarGraphItem(x=x, height=self.y1B, width=0.6, brush='r')\r\n        bg2B = pg.BarGraphItem(x=x+2, height=self.y2B, width=0.6, brush='b')\r\n        win2.addItem(bg1B)\r\n        win2.addItem(bg2B)\r\n        plt = win\r\n        pltB = win2\r\n        \r\n        exporter = pg.exporters.ImageExporter(plt.plotItem)\r\n        exporterB = pg.exporters.ImageExporter(pltB.plotItem)\r\n        \r\n        exporter.parameters()['width'] = 170\r\n        exporterB.parameters()['width'] = 170\r\n        exporter.export('graphic.png')\r\n        exporterB.export('graphicB.png')\r\n        outfile = \"informe.pdf\"\r\n        template = PdfReader(\"informe.pdf\", decompress=False).pages[0]\r\n        template_obj = pagexobj(template)\r\n        canvas = Canvas(outfile)\r\n        xobj_name = makerl(canvas, template_obj)\r\n        canvas.doForm(xobj_name)\r\n        canvas.drawImage(\"graphic.png\", 50, 300, width=None,height=None,mask=None)\r\n        canvas.drawImage(\"graphicB.png\", 50, 160, width=None,height=None,mask=None)\r\n\r\n        \r\n        canvas.save()\r\n        self.label5.setText(\"Informe generado con éxito\")\r\n        win.close()\r\n        win2.close()\r\n\r\n\r\n        self.setWindowTitle(\"Mi informe\")\r\n        # QWebEngineView es una vista de una web (vista de un navegador incrustada en una app)\r\n        # Documentación de la clase: https://doc.qt.io/qtforpython/PySide6/QtWebEngineWidgets/QWebEngineView.html\r\n        self.web = QWebEngineView()\r\n        # Para mostrar un PDF, es necesario habilitar los plugins. Los plugins están en https://doc.qt.io/qtforpython/PySide6/QtWebEngineCore/QWebEngineSettings.html#detailed-description\r\n        self.web.settings().setAttribute(QWebEngineSettings.PluginsEnabled, True)\r\n        # Obtenemos la ruta al documento PDF que queremos mostrar (a partir de la carpeta en la que se ejecuta el script)\r\n        #ruta = os.getcwd()\r\n        #rutaConPDF = ruta+\"/template.pdf\"\r\n        # Cargamos el fichero con el protocolo file:// (por eso necesitábamos la ruta completa)\r\n        # Usando http o https también se pueden cargar páginas web\r\n        #self.web.load(QUrl(\"file://\"+rutaConPDF))\r\n        self.setWindowTitle(\"Informe\")\r\n        self.web = QWebEngineView()\r\n        self.web.settings().setAttribute(QWebEngineSettings.PluginsEnabled, True)\r\n        ruta = Path(\"informe.pdf\")\r\n        ruta.absolute().as_uri()\r\n        self.web.load(QUrl(ruta.absolute().as_uri()))\r\n        self.setCentralWidget(self.web)\r\n        self.setCentralWidget(self.web)\r\n\r\n    def count_char(self,formula, char):\r\n        longitud=len(formula)\r\n        count=0\r\n        for  i in range(longitud):\r\n            if(formula[i]==char):\r\n                if(formula[i+1].isdigit() and (i+1)!=longitud):\r\n                    count=count + int(formula[i+1])\r\n                else:\r\n                    count=count + 1\r\n        return count\r\n\r\n\r\n    def conectar(self):\r\n        if(self.check_box.checkState()==False):\r\n            self.check_box.setChecked(True)\r\n            self.lineEdit_check.setText(\"ok\")\r\n        else:\r\n            self.check_box.setChecked(False)\r\n            self.lineEdit_check.setText(\"\")\r\n\r\n    def otherHide(self):\r\n        self.lineEdit_2.hide()\r\n        self.lineEdit_3.hide()\r\n        self.lineEdit_4.hide()\r\n        self.label_field2.hide()\r\n        self.label_field3.hide()\r\n        self.label_field4.setText(\"\")\r\n\r\n    def otherShow(self):\r\n        self.lineEdit_2.show()\r\n        self.label_field2.show()\r\n        self.lineEdit_3.show()\r\n        self.label_field3.show()\r\n        self.lineEdit_4.show()\r\n        self.label_field4.setText(\"Tipo: \")\r\n    def getFocus(self):\r\n        if(self.lineEdit_1.hasFocus() == True):\r\n            return self.lineEdit_1\r\n        if(self.lineEdit_2.hasFocus() == True):\r\n            return self.lineEdit_2\r\n        if(self.lineEdit_3.hasFocus() == True):\r\n            return self.lineEdit_3\r\n        if(self.lineEdit_4.hasFocus() == True):\r\n            return self.lineEdit_4\r\n        if(self.lineEditFilter.hasFocus() == True):\r\n            return self.lineEditFilter\r\n        if(self.lineEditInfo1.hasFocus() == True):\r\n            return self.lineEditInfo1\r\n        if(self.lineEditInfo2.hasFocus() == True):\r\n            return self.lineEditInfo2\r\n\r\n    def copyClipboard(self):\r\n        lineEditFocus = self.getFocus()\r\n        text = lineEditFocus.text()\r\n        textCopyOK = pyperclip.copy(text)\r\n\r\n    def cutClipboard(self):\r\n        lineEditFocus = self.getFocus()\r\n        text = lineEditFocus.text()\r\n        textCopyOK = pyperclip.copy(text)\r\n        lineEditFocus.setText(\"\")\r\n\r\n    def pasteClipboard(self):\r\n        lineEditFocus = self.getFocus()\r\n        lineEditFocus.setText(pyperclip.paste())\r\n\r\n    def removeData(self):\r\n        self.a_collection.delete_one({\"_id\": self.lineEdit_1.text()})\r\n        self.updateTable()\r\n    def newWizard(self):\r\n        campo=str(\"Fórmula química\")\r\n        valor=self.lineEditInfo1.text()\r\n        query={campo: valor}\r\n        campo2=str(\"Fórmula química\")\r\n        valor2=self.lineEditInfo2.text()\r\n        query2={campo: valor}\r\n        try:\r\n            for x in self.a_collection.find(query):\r\n                for key, value in x.items():\r\n                    if (key != \"_id\"):\r\n                        if(key==\"Nombre\"):\r\n                            self.Dato1f1=value\r\n                        if(key==\"Tipo\"):\r\n                            self.Dato4f1=value\r\n                        if(key==\"Punto de ebullición\"):\r\n                                    self.Dato5f1=value\r\n                for x in self.a_collection.find(query2):\r\n                        for key, value in x.items():\r\n                            if (key != \"_id\"):\r\n                                if(key==\"Nombre\"):\r\n                                    self.Dato1f2=value\r\n                                if(key==\"Tipo\"):\r\n                                    self.Dato4f2=value\r\n                                if(key==\"Punto de ebullición\"):\r\n                                    self.Dato5f2=value\r\n        except Exception as e:\r\n            raise e\r\n\r\n        self.wizard.activateWindow()\r\n        self.wizard.raise_()\r\n        self.wizard.show()\r\n        self.showMinimized()\r\n\r\n    def insertData(self):\r\n        try:\r\n            self.data_demo = {\"_id\": self.lineEdit_1.text(), \"Nombre\": self.lineEdit_2.text(\r\n            ), \"Fórmula química\": self.lineEdit_1.text(), \"Punto de ebullición\": self.lineEdit_3.text(), \"Tipo\": self.lineEdit_4.text()}\r\n            self.a_collection.insert_one(self.data_demo)\r\n            self.updateTable()\r\n        except:\r\n            print(\"An exception occurred\")\r\n\r\n\r\n    def updateData(self):\r\n        self.a_collection.update_one({\"_id\": self.lineEdit_1.text()},{\"$set\": {\"Nombre\": self.lineEdit_2.text(), \"Fórmula química\": self.lineEdit_1.text(), \"Punto de ebullición\": self.lineEdit_3.text(), \"Tipo\": self.lineEdit_4.text()}})\r\n        self.updateTable()\r\n\r\n    def updateTable(self):\r\n        self.tableFilter.clearContents()\r\n        self.tableEdit.clearContents()\r\n        try:\r\n            iter_length = len([i for i in self.a_collection.find()])\r\n            self.tableEdit.setRowCount(iter_length)\r\n            self.tableFilter.setRowCount(iter_length)\r\n            fila = 0\r\n            columna = 0\r\n            for x in self.a_collection.find():\r\n                for key, value in x.items():\r\n                    if (key != \"_id\"):\r\n                        self.tableEdit.setItem(\r\n                            fila-1, columna, QTableWidgetItem(value))\r\n                        self.tableFilter.setItem(\r\n                            fila-1, columna, QTableWidgetItem(value))\r\n                        columna += 1\r\n                fila += 1\r\n                columna=0\r\n        except Exception as e:\r\n            raise e        \r\n    def filterTable(self):\r\n        self.tableFilter.clearContents()\r\n        fila=0\r\n        columna=0\r\n        campo=str(self.comboBoxFilter.currentText())\r\n        valor=self.lineEditFilter.text()\r\n        query={campo: valor}\r\n        try:\r\n            iter_length=len([i for i in self.a_collection.find()])\r\n            self.tableEdit.setRowCount(iter_length)\r\n            self.tableFilter.setRowCount(iter_length)\r\n            for x in self.a_collection.find(query):\r\n                for key, value in x.items():\r\n                    if (key != \"_id\"):\r\n                        self.tableFilter.setItem(\r\n                            fila, columna, QTableWidgetItem(value))\r\n                        columna += 1\r\n                fila += 1\r\n                columna=0\r\n        except Exception as e:\r\n            raise e\r\n\r\n\r\napp=QApplication(sys.argv)\r\nw=MainWindow()\r\nw.show()\r\napp.exec()\r\n"
    },
    {
      "file": "Chemical_demo.py",
      "selection": {
        "start": {
          "line": 257,
          "character": 1
        },
        "end": {
          "line": 323,
          "character": 1
        }
      },
      "description": "Métodos para la edición",
      "contents": "import sys\r\nfrom ast import Lambda\r\nfrom datetime import date\r\nfrom pickle import TRUE\r\nfrom tkinter import Button, Spinbox\r\nfrom pathlib import Path\r\nimport sys, os\r\nfrom PySide6.QtCore import QUrl\r\nfrom PySide6.QtWidgets import QApplication, QMainWindow, QPushButton, QWizard, QWizardPage, QLineEdit, QHBoxLayout, QLabel\r\nfrom PySide6.QtWebEngineWidgets import QWebEngineView\r\nfrom PySide6.QtWebEngineCore import QWebEngineSettings\r\nimport numpy as np\r\nimport pyperclip\r\nimport pyqtgraph as pg\r\nimport pyqtgraph.exporters\r\nfrom mongita import MongitaClientDisk\r\n# pdfrw permite leer y extraer páginas de archivos PDF\r\nfrom pdfrw import PdfReader\r\nfrom pdfrw.buildxobj import pagexobj\r\nfrom pdfrw.toreportlab import makerl\r\nfrom pyqtgraph.Qt import QtCore, QtGui\r\nfrom PySide6.QtGui import QPixmap\r\nfrom PySide6.QtWidgets import (QAbstractItemView, QApplication, QCheckBox,\r\n                               QComboBox, QHBoxLayout, QLabel, QLineEdit,\r\n                               QMainWindow, QPushButton, QSpinBox,\r\n                               QTableWidgetItem, QVBoxLayout, QWizard,\r\n                               QWizardPage)\r\nfrom reportlab.pdfgen.canvas import Canvas\r\n\r\nfrom Chemical import Ui_MainWindow\r\n\r\n # reportlab permite la creación de PDF usando texto y primitivas de dibujo\r\n\r\n        # reportlab permite la creación de PDF usando texto y primitivas de dibujo\r\n    # pdfrw permite leer y extraer páginas de archivos PDF\r\n\r\n\r\n\r\nclass MainWindow(QMainWindow, Ui_MainWindow):\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.setupUi(self)\r\n        self.Dato1f1=\"\"\r\n        self.Dato4f1=\"\"\r\n        self.Dato5f1=\"\"\r\n        self.Dato1f2=\"\"\r\n        self.Dato4f2=\"\"\r\n        self.Dato5f2=\"\"\r\n        \r\n        client=MongitaClientDisk()\r\n        my_db=client.b_db\r\n        self.a_collection=my_db.new_collection\r\n        self.actionPaste.triggered.connect(self.pasteClipboard)\r\n        self.actionCopy.triggered.connect(self.copyClipboard)\r\n        self.actionCut.triggered.connect(self.cutClipboard)\r\n        self.ButtonInsert.clicked.connect(self.insertData)\r\n        self.ButtonRemove.clicked.connect(self.removeData)\r\n        self.ButtonRemove.enterEvent=lambda event: self.otherHide()\r\n        self.ButtonRemove.leaveEvent= lambda event: self.otherShow()\r\n        self.ButtonReplace.clicked.connect(self.updateData)\r\n        self.ButtonFilterInfo.clicked.connect(self.filterTable)\r\n        self.tableEdit.setEditTriggers(QAbstractItemView.NoEditTriggers)\r\n        # Wizar\r\n        self.wizard=QWizard()\r\n        next=self.wizard.button(QWizard.NextButton)\r\n        self.buttoMakeInfo.clicked.connect(self.newWizard)\r\n        self.wizard.setWizardStyle(QWizard.ModernStyle)\r\n        self.wizard.setPixmap(QWizard.WatermarkPixmap,QPixmap('Watermark.png'))\r\n        self.wizard.setPixmap(QWizard.LogoPixmap, QPixmap('Logo.png'))\r\n        self.wizard.setPixmap(QWizard.BannerPixmap, QPixmap('Banner.png'))\r\n\r\n        page1=QWizardPage()\r\n        page1.setTitle('Identificación del usuario')\r\n        page1.setSubTitle('Introduzaca su nombre completo')\r\n        lineEdit=QLineEdit()\r\n        label=QLabel()\r\n        label.setText(\"Nombre completo:\")\r\n        hLayout1=QHBoxLayout(page1)\r\n        hLayout1.addWidget(label)\r\n        hLayout1.addWidget(lineEdit)\r\n        page1.registerField('nombre*', lineEdit,lineEdit.text(), 'textChanged')    \r\n        self.wizard.addPage(page1)\r\n     \r\n        page2=QWizardPage()\r\n        page2.setTitle('Generación del identificador')\r\n        page2.setSubTitle( \"Genere su identificador\")\r\n        next.clicked.connect(lambda:page2.setSubTitle(page1.field('nombre')+\" genere su identificador\")) \r\n        next.clicked.connect(lambda:self.asignaNombre(page1.field('nombre')))\r\n\r\n        self.spin=QSpinBox()\r\n        self.check_box=QCheckBox()\r\n        self.combo=QComboBox()\r\n        self.combo.addItem(\"A\")\r\n        self.combo.addItem(\"B\")\r\n        self.combo.addItem(\"C\")\r\n        self.spin.setMaximum(9)\r\n        self.spin.setMinimum(0)\r\n        label1=QLabel()\r\n        label2=QLabel()\r\n        label1.setText(\"Letra de id: \")\r\n        label2.setText(\"Número de id: \")\r\n        hLayout2=QHBoxLayout(page2)\r\n        hLayout2.addWidget(label1)\r\n        hLayout2.addWidget(self.spin)\r\n        hLayout2.addWidget(label2)\r\n        hLayout2.addWidget(self.combo)\r\n        self.wizard.addPage(page2)\r\n        \r\n        page3 = QWizardPage()\r\n        page3.setTitle('Verificación del idntificador')\r\n        page3.setSubTitle('Verifique su id')\r\n        label3=QLabel()\r\n        next.clicked.connect(lambda:label3.setText(\" Su Id generada es: \"+self.combo.currentText()+\"-\"+str(self.spin.value())+\"   ¿Valores correctos?\"))\r\n        next.clicked.connect(lambda:self.setID())\r\n        dateTimeObj = date.today()\r\n        timestampStr = dateTimeObj.strftime(\"%d-%b-%Y\")\r\n        self.fechaFin=timestampStr\r\n        hLayout3=QHBoxLayout(page3)\r\n        hLayout3.addWidget(label3)\r\n        hLayout3.addWidget(self.check_box)\r\n        self.check_box.mousePressEvent= lambda event: self.conectar()\r\n        self.lineEdit_check=QLineEdit()\r\n        hLayout3.addWidget(self.lineEdit_check)\r\n        self.lineEdit_check.hide()\r\n        page3.registerField('campo_check*', self.lineEdit_check)\r\n        self.wizard.addPage(page3)\r\n\r\n        page4 = QWizardPage()\r\n        page4.setTitle('Generar informe')\r\n        page4.setSubTitle('Terminando el proceso')\r\n        label4=QLabel()\r\n        self.label5=QLabel()\r\n        button4=QPushButton(\"Generar Informe\")\r\n        label4.setText(\"Muchas gracias por su colaboración\")\r\n        self.label5.setText(\"\")\r\n        hLayout4=QVBoxLayout(page4)\r\n        hLayout4.addWidget(label4)\r\n        hLayout4.addWidget(self.label5)\r\n        hLayout4.addWidget(button4)\r\n        page4.setFinalPage(True)\r\n        button4.mousePressEvent= lambda event: self.generaInforme()\r\n        finish = self.wizard.button(QWizard.FinishButton)\r\n        self.wizard.addPage(page4)\r\n\r\n        self.updateTable()\r\n    def setID(self):\r\n        item_select=self.combo.currentText()\r\n        spin_selected=self.spin.value()\r\n        self.idFin=item_select+\"-\"+str(spin_selected)\r\n    def  asignaNombre(self,nombre):\r\n        self.nombreFin=nombre\r\n    def generaInforme(self):\r\n        outfile = \"informe.pdf\"\r\n        template = PdfReader(\"template.pdf\", decompress=False).pages[0]\r\n        template_obj = pagexobj(template)\r\n        canvas = Canvas(outfile)\r\n        xobj_name = makerl(canvas, template_obj)\r\n        canvas.doForm(xobj_name)\r\n        #A4 595 x 842 px\r\n        self.formula_filtradaA=self.lineEditInfo1.text()\r\n        self.formula_filtradaB=self.lineEditInfo2.text()\r\n        numCF1=self.count_char(self.formula_filtradaA,'C')\r\n        numHF1=self.count_char(self.formula_filtradaA,'H')\r\n        numCF2=self.count_char(self.formula_filtradaB,'C')\r\n        numHF2=self.count_char(self.formula_filtradaB,'H')\r\n        self.y1=[numCF1]\r\n        self.y2=[numHF1]\r\n        self.y1B=[numCF2]\r\n        self.y2B=[numHF2]\r\n        self.masa_molar_f1=(numCF1*4)+numHF1\r\n        self.masa_molar_f2=(numCF2*4)+numHF2\r\n\r\n        canvas.drawString(318, 660, self.idFin)\r\n        canvas.drawString(170, 603, self.nombreFin)\r\n        canvas.drawString(110, 632, self.fechaFin)\r\n        canvas.drawString(50, 520, self.textEdit.toPlainText())\r\n\r\n        canvas.drawString(355, 418, self.Dato1f1)\r\n        canvas.drawString(400, 391, self.lineEditInfo1.text())\r\n        canvas.drawString(375, 364, str(self.masa_molar_f1))\r\n        canvas.drawString(340, 336, self.Dato4f1)\r\n        canvas.drawString(410, 310, self.Dato5f1)\r\n\r\n        canvas.drawString(355, 273, self.Dato1f2)\r\n        canvas.drawString(400, 245, self.lineEditInfo2.text())\r\n        canvas.drawString(375, 218, str(self.masa_molar_f2))\r\n        canvas.drawString(340, 192, self.Dato4f2)\r\n        canvas.drawString(410, 164, self.Dato5f2)\r\n        canvas.save()\r\n#GRAFICAS###############################################\r\n        win = pg.plot()\r\n        win2=pg.plot()\r\n        win.setWindowTitle('Azul Hidrogeno Rojo Carbono')\r\n        win2.setWindowTitle('Azul Hidrogeno Rojo Carbono')\r\n\r\n        fn = QtGui.QFont()\r\n        fn.setPointSize(15)\r\n        win.getAxis(\"bottom\").setTickFont(fn)\r\n        win.getAxis(\"left\").setTickFont(fn)\r\n        win2.getAxis(\"bottom\").setTickFont(fn)\r\n        win2.getAxis(\"left\").setTickFont(fn)\r\n        x = np.arange(1)\r\n        bg1 = pg.BarGraphItem(x=x, height=self.y1, width=0.6, brush='r')\r\n        bg2= pg.BarGraphItem(x=x+2, height=self.y2, width=0.6, brush='b')\r\n        win.addItem(bg1)\r\n        win.addItem(bg2)\r\n        bg1B = pg.BarGraphItem(x=x, height=self.y1B, width=0.6, brush='r')\r\n        bg2B = pg.BarGraphItem(x=x+2, height=self.y2B, width=0.6, brush='b')\r\n        win2.addItem(bg1B)\r\n        win2.addItem(bg2B)\r\n        plt = win\r\n        pltB = win2\r\n        \r\n        exporter = pg.exporters.ImageExporter(plt.plotItem)\r\n        exporterB = pg.exporters.ImageExporter(pltB.plotItem)\r\n        \r\n        exporter.parameters()['width'] = 170\r\n        exporterB.parameters()['width'] = 170\r\n        exporter.export('graphic.png')\r\n        exporterB.export('graphicB.png')\r\n        outfile = \"informe.pdf\"\r\n        template = PdfReader(\"informe.pdf\", decompress=False).pages[0]\r\n        template_obj = pagexobj(template)\r\n        canvas = Canvas(outfile)\r\n        xobj_name = makerl(canvas, template_obj)\r\n        canvas.doForm(xobj_name)\r\n        canvas.drawImage(\"graphic.png\", 50, 300, width=None,height=None,mask=None)\r\n        canvas.drawImage(\"graphicB.png\", 50, 160, width=None,height=None,mask=None)\r\n\r\n        \r\n        canvas.save()\r\n        self.label5.setText(\"Informe generado con éxito\")\r\n        win.close()\r\n        win2.close()\r\n\r\n\r\n        self.setWindowTitle(\"Mi informe\")\r\n        # QWebEngineView es una vista de una web (vista de un navegador incrustada en una app)\r\n        # Documentación de la clase: https://doc.qt.io/qtforpython/PySide6/QtWebEngineWidgets/QWebEngineView.html\r\n        self.web = QWebEngineView()\r\n        # Para mostrar un PDF, es necesario habilitar los plugins. Los plugins están en https://doc.qt.io/qtforpython/PySide6/QtWebEngineCore/QWebEngineSettings.html#detailed-description\r\n        self.web.settings().setAttribute(QWebEngineSettings.PluginsEnabled, True)\r\n        # Obtenemos la ruta al documento PDF que queremos mostrar (a partir de la carpeta en la que se ejecuta el script)\r\n        #ruta = os.getcwd()\r\n        #rutaConPDF = ruta+\"/template.pdf\"\r\n        # Cargamos el fichero con el protocolo file:// (por eso necesitábamos la ruta completa)\r\n        # Usando http o https también se pueden cargar páginas web\r\n        #self.web.load(QUrl(\"file://\"+rutaConPDF))\r\n        self.setWindowTitle(\"Informe\")\r\n        self.web = QWebEngineView()\r\n        self.web.settings().setAttribute(QWebEngineSettings.PluginsEnabled, True)\r\n        ruta = Path(\"informe.pdf\")\r\n        ruta.absolute().as_uri()\r\n        self.web.load(QUrl(ruta.absolute().as_uri()))\r\n        self.setCentralWidget(self.web)\r\n        self.setCentralWidget(self.web)\r\n\r\n    def count_char(self,formula, char):\r\n        longitud=len(formula)\r\n        count=0\r\n        for  i in range(longitud):\r\n            if(formula[i]==char):\r\n                if(formula[i+1].isdigit() and (i+1)!=longitud):\r\n                    count=count + int(formula[i+1])\r\n                else:\r\n                    count=count + 1\r\n        return count\r\n\r\n\r\n    def conectar(self):\r\n        if(self.check_box.checkState()==False):\r\n            self.check_box.setChecked(True)\r\n            self.lineEdit_check.setText(\"ok\")\r\n        else:\r\n            self.check_box.setChecked(False)\r\n            self.lineEdit_check.setText(\"\")\r\n\r\n    def otherHide(self):\r\n        self.lineEdit_2.hide()\r\n        self.lineEdit_3.hide()\r\n        self.lineEdit_4.hide()\r\n        self.label_field2.hide()\r\n        self.label_field3.hide()\r\n        self.label_field4.setText(\"\")\r\n\r\n    def otherShow(self):\r\n        self.lineEdit_2.show()\r\n        self.label_field2.show()\r\n        self.lineEdit_3.show()\r\n        self.label_field3.show()\r\n        self.lineEdit_4.show()\r\n        self.label_field4.setText(\"Tipo: \")\r\n    def getFocus(self):\r\n        if(self.lineEdit_1.hasFocus() == True):\r\n            return self.lineEdit_1\r\n        if(self.lineEdit_2.hasFocus() == True):\r\n            return self.lineEdit_2\r\n        if(self.lineEdit_3.hasFocus() == True):\r\n            return self.lineEdit_3\r\n        if(self.lineEdit_4.hasFocus() == True):\r\n            return self.lineEdit_4\r\n        if(self.lineEditFilter.hasFocus() == True):\r\n            return self.lineEditFilter\r\n        if(self.lineEditInfo1.hasFocus() == True):\r\n            return self.lineEditInfo1\r\n        if(self.lineEditInfo2.hasFocus() == True):\r\n            return self.lineEditInfo2\r\n\r\n    def copyClipboard(self):\r\n        lineEditFocus = self.getFocus()\r\n        text = lineEditFocus.text()\r\n        textCopyOK = pyperclip.copy(text)\r\n\r\n    def cutClipboard(self):\r\n        lineEditFocus = self.getFocus()\r\n        text = lineEditFocus.text()\r\n        textCopyOK = pyperclip.copy(text)\r\n        lineEditFocus.setText(\"\")\r\n\r\n    def pasteClipboard(self):\r\n        lineEditFocus = self.getFocus()\r\n        lineEditFocus.setText(pyperclip.paste())\r\n\r\n    def removeData(self):\r\n        self.a_collection.delete_one({\"_id\": self.lineEdit_1.text()})\r\n        self.updateTable()\r\n    def newWizard(self):\r\n        campo=str(\"Fórmula química\")\r\n        valor=self.lineEditInfo1.text()\r\n        query={campo: valor}\r\n        campo2=str(\"Fórmula química\")\r\n        valor2=self.lineEditInfo2.text()\r\n        query2={campo: valor}\r\n        try:\r\n            for x in self.a_collection.find(query):\r\n                for key, value in x.items():\r\n                    if (key != \"_id\"):\r\n                        if(key==\"Nombre\"):\r\n                            self.Dato1f1=value\r\n                        if(key==\"Tipo\"):\r\n                            self.Dato4f1=value\r\n                        if(key==\"Punto de ebullición\"):\r\n                                    self.Dato5f1=value\r\n                for x in self.a_collection.find(query2):\r\n                        for key, value in x.items():\r\n                            if (key != \"_id\"):\r\n                                if(key==\"Nombre\"):\r\n                                    self.Dato1f2=value\r\n                                if(key==\"Tipo\"):\r\n                                    self.Dato4f2=value\r\n                                if(key==\"Punto de ebullición\"):\r\n                                    self.Dato5f2=value\r\n        except Exception as e:\r\n            raise e\r\n\r\n        self.wizard.activateWindow()\r\n        self.wizard.raise_()\r\n        self.wizard.show()\r\n        self.showMinimized()\r\n\r\n    def insertData(self):\r\n        try:\r\n            self.data_demo = {\"_id\": self.lineEdit_1.text(), \"Nombre\": self.lineEdit_2.text(\r\n            ), \"Fórmula química\": self.lineEdit_1.text(), \"Punto de ebullición\": self.lineEdit_3.text(), \"Tipo\": self.lineEdit_4.text()}\r\n            self.a_collection.insert_one(self.data_demo)\r\n            self.updateTable()\r\n        except:\r\n            print(\"An exception occurred\")\r\n\r\n\r\n    def updateData(self):\r\n        self.a_collection.update_one({\"_id\": self.lineEdit_1.text()},{\"$set\": {\"Nombre\": self.lineEdit_2.text(), \"Fórmula química\": self.lineEdit_1.text(), \"Punto de ebullición\": self.lineEdit_3.text(), \"Tipo\": self.lineEdit_4.text()}})\r\n        self.updateTable()\r\n\r\n    def updateTable(self):\r\n        self.tableFilter.clearContents()\r\n        self.tableEdit.clearContents()\r\n        try:\r\n            iter_length = len([i for i in self.a_collection.find()])\r\n            self.tableEdit.setRowCount(iter_length)\r\n            self.tableFilter.setRowCount(iter_length)\r\n            fila = 0\r\n            columna = 0\r\n            for x in self.a_collection.find():\r\n                for key, value in x.items():\r\n                    if (key != \"_id\"):\r\n                        self.tableEdit.setItem(\r\n                            fila-1, columna, QTableWidgetItem(value))\r\n                        self.tableFilter.setItem(\r\n                            fila-1, columna, QTableWidgetItem(value))\r\n                        columna += 1\r\n                fila += 1\r\n                columna=0\r\n        except Exception as e:\r\n            raise e        \r\n    def filterTable(self):\r\n        self.tableFilter.clearContents()\r\n        fila=0\r\n        columna=0\r\n        campo=str(self.comboBoxFilter.currentText())\r\n        valor=self.lineEditFilter.text()\r\n        query={campo: valor}\r\n        try:\r\n            iter_length=len([i for i in self.a_collection.find()])\r\n            self.tableEdit.setRowCount(iter_length)\r\n            self.tableFilter.setRowCount(iter_length)\r\n            for x in self.a_collection.find(query):\r\n                for key, value in x.items():\r\n                    if (key != \"_id\"):\r\n                        self.tableFilter.setItem(\r\n                            fila, columna, QTableWidgetItem(value))\r\n                        columna += 1\r\n                fila += 1\r\n                columna=0\r\n        except Exception as e:\r\n            raise e\r\n\r\n\r\napp=QApplication(sys.argv)\r\nw=MainWindow()\r\nw.show()\r\napp.exec()\r\n"
    },
    {
      "file": "Chemical_demo.py",
      "selection": {
        "start": {
          "line": 361,
          "character": 5
        },
        "end": {
          "line": 417,
          "character": 1
        }
      },
      "description": "Metodos para la manipulación de la base de datos.",
      "contents": "import sys\r\nfrom ast import Lambda\r\nfrom datetime import date\r\nfrom pickle import TRUE\r\nfrom tkinter import Button, Spinbox\r\nfrom pathlib import Path\r\nimport sys, os\r\nfrom PySide6.QtCore import QUrl\r\nfrom PySide6.QtWidgets import QApplication, QMainWindow, QPushButton, QWizard, QWizardPage, QLineEdit, QHBoxLayout, QLabel\r\nfrom PySide6.QtWebEngineWidgets import QWebEngineView\r\nfrom PySide6.QtWebEngineCore import QWebEngineSettings\r\nimport numpy as np\r\nimport pyperclip\r\nimport pyqtgraph as pg\r\nimport pyqtgraph.exporters\r\nfrom mongita import MongitaClientDisk\r\n# pdfrw permite leer y extraer páginas de archivos PDF\r\nfrom pdfrw import PdfReader\r\nfrom pdfrw.buildxobj import pagexobj\r\nfrom pdfrw.toreportlab import makerl\r\nfrom pyqtgraph.Qt import QtCore, QtGui\r\nfrom PySide6.QtGui import QPixmap\r\nfrom PySide6.QtWidgets import (QAbstractItemView, QApplication, QCheckBox,\r\n                               QComboBox, QHBoxLayout, QLabel, QLineEdit,\r\n                               QMainWindow, QPushButton, QSpinBox,\r\n                               QTableWidgetItem, QVBoxLayout, QWizard,\r\n                               QWizardPage)\r\nfrom reportlab.pdfgen.canvas import Canvas\r\n\r\nfrom Chemical import Ui_MainWindow\r\n\r\n # reportlab permite la creación de PDF usando texto y primitivas de dibujo\r\n\r\n        # reportlab permite la creación de PDF usando texto y primitivas de dibujo\r\n    # pdfrw permite leer y extraer páginas de archivos PDF\r\n\r\n\r\n\r\nclass MainWindow(QMainWindow, Ui_MainWindow):\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.setupUi(self)\r\n        self.Dato1f1=\"\"\r\n        self.Dato4f1=\"\"\r\n        self.Dato5f1=\"\"\r\n        self.Dato1f2=\"\"\r\n        self.Dato4f2=\"\"\r\n        self.Dato5f2=\"\"\r\n        \r\n        client=MongitaClientDisk()\r\n        my_db=client.b_db\r\n        self.a_collection=my_db.new_collection\r\n        self.actionPaste.triggered.connect(self.pasteClipboard)\r\n        self.actionCopy.triggered.connect(self.copyClipboard)\r\n        self.actionCut.triggered.connect(self.cutClipboard)\r\n        self.ButtonInsert.clicked.connect(self.insertData)\r\n        self.ButtonRemove.clicked.connect(self.removeData)\r\n        self.ButtonRemove.enterEvent=lambda event: self.otherHide()\r\n        self.ButtonRemove.leaveEvent= lambda event: self.otherShow()\r\n        self.ButtonReplace.clicked.connect(self.updateData)\r\n        self.ButtonFilterInfo.clicked.connect(self.filterTable)\r\n        self.tableEdit.setEditTriggers(QAbstractItemView.NoEditTriggers)\r\n        # Wizar\r\n        self.wizard=QWizard()\r\n        next=self.wizard.button(QWizard.NextButton)\r\n        self.buttoMakeInfo.clicked.connect(self.newWizard)\r\n        self.wizard.setWizardStyle(QWizard.ModernStyle)\r\n        self.wizard.setPixmap(QWizard.WatermarkPixmap,QPixmap('Watermark.png'))\r\n        self.wizard.setPixmap(QWizard.LogoPixmap, QPixmap('Logo.png'))\r\n        self.wizard.setPixmap(QWizard.BannerPixmap, QPixmap('Banner.png'))\r\n\r\n        page1=QWizardPage()\r\n        page1.setTitle('Identificación del usuario')\r\n        page1.setSubTitle('Introduzaca su nombre completo')\r\n        lineEdit=QLineEdit()\r\n        label=QLabel()\r\n        label.setText(\"Nombre completo:\")\r\n        hLayout1=QHBoxLayout(page1)\r\n        hLayout1.addWidget(label)\r\n        hLayout1.addWidget(lineEdit)\r\n        page1.registerField('nombre*', lineEdit,lineEdit.text(), 'textChanged')    \r\n        self.wizard.addPage(page1)\r\n     \r\n        page2=QWizardPage()\r\n        page2.setTitle('Generación del identificador')\r\n        page2.setSubTitle( \"Genere su identificador\")\r\n        next.clicked.connect(lambda:page2.setSubTitle(page1.field('nombre')+\" genere su identificador\")) \r\n        next.clicked.connect(lambda:self.asignaNombre(page1.field('nombre')))\r\n\r\n        self.spin=QSpinBox()\r\n        self.check_box=QCheckBox()\r\n        self.combo=QComboBox()\r\n        self.combo.addItem(\"A\")\r\n        self.combo.addItem(\"B\")\r\n        self.combo.addItem(\"C\")\r\n        self.spin.setMaximum(9)\r\n        self.spin.setMinimum(0)\r\n        label1=QLabel()\r\n        label2=QLabel()\r\n        label1.setText(\"Letra de id: \")\r\n        label2.setText(\"Número de id: \")\r\n        hLayout2=QHBoxLayout(page2)\r\n        hLayout2.addWidget(label1)\r\n        hLayout2.addWidget(self.spin)\r\n        hLayout2.addWidget(label2)\r\n        hLayout2.addWidget(self.combo)\r\n        self.wizard.addPage(page2)\r\n        \r\n        page3 = QWizardPage()\r\n        page3.setTitle('Verificación del idntificador')\r\n        page3.setSubTitle('Verifique su id')\r\n        label3=QLabel()\r\n        next.clicked.connect(lambda:label3.setText(\" Su Id generada es: \"+self.combo.currentText()+\"-\"+str(self.spin.value())+\"   ¿Valores correctos?\"))\r\n        next.clicked.connect(lambda:self.setID())\r\n        dateTimeObj = date.today()\r\n        timestampStr = dateTimeObj.strftime(\"%d-%b-%Y\")\r\n        self.fechaFin=timestampStr\r\n        hLayout3=QHBoxLayout(page3)\r\n        hLayout3.addWidget(label3)\r\n        hLayout3.addWidget(self.check_box)\r\n        self.check_box.mousePressEvent= lambda event: self.conectar()\r\n        self.lineEdit_check=QLineEdit()\r\n        hLayout3.addWidget(self.lineEdit_check)\r\n        self.lineEdit_check.hide()\r\n        page3.registerField('campo_check*', self.lineEdit_check)\r\n        self.wizard.addPage(page3)\r\n\r\n        page4 = QWizardPage()\r\n        page4.setTitle('Generar informe')\r\n        page4.setSubTitle('Terminando el proceso')\r\n        label4=QLabel()\r\n        self.label5=QLabel()\r\n        button4=QPushButton(\"Generar Informe\")\r\n        label4.setText(\"Muchas gracias por su colaboración\")\r\n        self.label5.setText(\"\")\r\n        hLayout4=QVBoxLayout(page4)\r\n        hLayout4.addWidget(label4)\r\n        hLayout4.addWidget(self.label5)\r\n        hLayout4.addWidget(button4)\r\n        page4.setFinalPage(True)\r\n        button4.mousePressEvent= lambda event: self.generaInforme()\r\n        finish = self.wizard.button(QWizard.FinishButton)\r\n        self.wizard.addPage(page4)\r\n\r\n        self.updateTable()\r\n    def setID(self):\r\n        item_select=self.combo.currentText()\r\n        spin_selected=self.spin.value()\r\n        self.idFin=item_select+\"-\"+str(spin_selected)\r\n    def  asignaNombre(self,nombre):\r\n        self.nombreFin=nombre\r\n    def generaInforme(self):\r\n        outfile = \"informe.pdf\"\r\n        template = PdfReader(\"template.pdf\", decompress=False).pages[0]\r\n        template_obj = pagexobj(template)\r\n        canvas = Canvas(outfile)\r\n        xobj_name = makerl(canvas, template_obj)\r\n        canvas.doForm(xobj_name)\r\n        #A4 595 x 842 px\r\n        self.formula_filtradaA=self.lineEditInfo1.text()\r\n        self.formula_filtradaB=self.lineEditInfo2.text()\r\n        numCF1=self.count_char(self.formula_filtradaA,'C')\r\n        numHF1=self.count_char(self.formula_filtradaA,'H')\r\n        numCF2=self.count_char(self.formula_filtradaB,'C')\r\n        numHF2=self.count_char(self.formula_filtradaB,'H')\r\n        self.y1=[numCF1]\r\n        self.y2=[numHF1]\r\n        self.y1B=[numCF2]\r\n        self.y2B=[numHF2]\r\n        self.masa_molar_f1=(numCF1*4)+numHF1\r\n        self.masa_molar_f2=(numCF2*4)+numHF2\r\n\r\n        canvas.drawString(318, 660, self.idFin)\r\n        canvas.drawString(170, 603, self.nombreFin)\r\n        canvas.drawString(110, 632, self.fechaFin)\r\n        canvas.drawString(50, 520, self.textEdit.toPlainText())\r\n\r\n        canvas.drawString(355, 418, self.Dato1f1)\r\n        canvas.drawString(400, 391, self.lineEditInfo1.text())\r\n        canvas.drawString(375, 364, str(self.masa_molar_f1))\r\n        canvas.drawString(340, 336, self.Dato4f1)\r\n        canvas.drawString(410, 310, self.Dato5f1)\r\n\r\n        canvas.drawString(355, 273, self.Dato1f2)\r\n        canvas.drawString(400, 245, self.lineEditInfo2.text())\r\n        canvas.drawString(375, 218, str(self.masa_molar_f2))\r\n        canvas.drawString(340, 192, self.Dato4f2)\r\n        canvas.drawString(410, 164, self.Dato5f2)\r\n        canvas.save()\r\n#GRAFICAS###############################################\r\n        win = pg.plot()\r\n        win2=pg.plot()\r\n        win.setWindowTitle('Azul Hidrogeno Rojo Carbono')\r\n        win2.setWindowTitle('Azul Hidrogeno Rojo Carbono')\r\n\r\n        fn = QtGui.QFont()\r\n        fn.setPointSize(15)\r\n        win.getAxis(\"bottom\").setTickFont(fn)\r\n        win.getAxis(\"left\").setTickFont(fn)\r\n        win2.getAxis(\"bottom\").setTickFont(fn)\r\n        win2.getAxis(\"left\").setTickFont(fn)\r\n        x = np.arange(1)\r\n        bg1 = pg.BarGraphItem(x=x, height=self.y1, width=0.6, brush='r')\r\n        bg2= pg.BarGraphItem(x=x+2, height=self.y2, width=0.6, brush='b')\r\n        win.addItem(bg1)\r\n        win.addItem(bg2)\r\n        bg1B = pg.BarGraphItem(x=x, height=self.y1B, width=0.6, brush='r')\r\n        bg2B = pg.BarGraphItem(x=x+2, height=self.y2B, width=0.6, brush='b')\r\n        win2.addItem(bg1B)\r\n        win2.addItem(bg2B)\r\n        plt = win\r\n        pltB = win2\r\n        \r\n        exporter = pg.exporters.ImageExporter(plt.plotItem)\r\n        exporterB = pg.exporters.ImageExporter(pltB.plotItem)\r\n        \r\n        exporter.parameters()['width'] = 170\r\n        exporterB.parameters()['width'] = 170\r\n        exporter.export('graphic.png')\r\n        exporterB.export('graphicB.png')\r\n        outfile = \"informe.pdf\"\r\n        template = PdfReader(\"informe.pdf\", decompress=False).pages[0]\r\n        template_obj = pagexobj(template)\r\n        canvas = Canvas(outfile)\r\n        xobj_name = makerl(canvas, template_obj)\r\n        canvas.doForm(xobj_name)\r\n        canvas.drawImage(\"graphic.png\", 50, 300, width=None,height=None,mask=None)\r\n        canvas.drawImage(\"graphicB.png\", 50, 160, width=None,height=None,mask=None)\r\n\r\n        \r\n        canvas.save()\r\n        self.label5.setText(\"Informe generado con éxito\")\r\n        win.close()\r\n        win2.close()\r\n\r\n\r\n        self.setWindowTitle(\"Mi informe\")\r\n        # QWebEngineView es una vista de una web (vista de un navegador incrustada en una app)\r\n        # Documentación de la clase: https://doc.qt.io/qtforpython/PySide6/QtWebEngineWidgets/QWebEngineView.html\r\n        self.web = QWebEngineView()\r\n        # Para mostrar un PDF, es necesario habilitar los plugins. Los plugins están en https://doc.qt.io/qtforpython/PySide6/QtWebEngineCore/QWebEngineSettings.html#detailed-description\r\n        self.web.settings().setAttribute(QWebEngineSettings.PluginsEnabled, True)\r\n        # Obtenemos la ruta al documento PDF que queremos mostrar (a partir de la carpeta en la que se ejecuta el script)\r\n        #ruta = os.getcwd()\r\n        #rutaConPDF = ruta+\"/template.pdf\"\r\n        # Cargamos el fichero con el protocolo file:// (por eso necesitábamos la ruta completa)\r\n        # Usando http o https también se pueden cargar páginas web\r\n        #self.web.load(QUrl(\"file://\"+rutaConPDF))\r\n        self.setWindowTitle(\"Informe\")\r\n        self.web = QWebEngineView()\r\n        self.web.settings().setAttribute(QWebEngineSettings.PluginsEnabled, True)\r\n        ruta = Path(\"informe.pdf\")\r\n        ruta.absolute().as_uri()\r\n        self.web.load(QUrl(ruta.absolute().as_uri()))\r\n        self.setCentralWidget(self.web)\r\n        self.setCentralWidget(self.web)\r\n\r\n    def count_char(self,formula, char):\r\n        longitud=len(formula)\r\n        count=0\r\n        for  i in range(longitud):\r\n            if(formula[i]==char):\r\n                if(formula[i+1].isdigit() and (i+1)!=longitud):\r\n                    count=count + int(formula[i+1])\r\n                else:\r\n                    count=count + 1\r\n        return count\r\n\r\n\r\n    def conectar(self):\r\n        if(self.check_box.checkState()==False):\r\n            self.check_box.setChecked(True)\r\n            self.lineEdit_check.setText(\"ok\")\r\n        else:\r\n            self.check_box.setChecked(False)\r\n            self.lineEdit_check.setText(\"\")\r\n\r\n    def otherHide(self):\r\n        self.lineEdit_2.hide()\r\n        self.lineEdit_3.hide()\r\n        self.lineEdit_4.hide()\r\n        self.label_field2.hide()\r\n        self.label_field3.hide()\r\n        self.label_field4.setText(\"\")\r\n\r\n    def otherShow(self):\r\n        self.lineEdit_2.show()\r\n        self.label_field2.show()\r\n        self.lineEdit_3.show()\r\n        self.label_field3.show()\r\n        self.lineEdit_4.show()\r\n        self.label_field4.setText(\"Tipo: \")\r\n    def getFocus(self):\r\n        if(self.lineEdit_1.hasFocus() == True):\r\n            return self.lineEdit_1\r\n        if(self.lineEdit_2.hasFocus() == True):\r\n            return self.lineEdit_2\r\n        if(self.lineEdit_3.hasFocus() == True):\r\n            return self.lineEdit_3\r\n        if(self.lineEdit_4.hasFocus() == True):\r\n            return self.lineEdit_4\r\n        if(self.lineEditFilter.hasFocus() == True):\r\n            return self.lineEditFilter\r\n        if(self.lineEditInfo1.hasFocus() == True):\r\n            return self.lineEditInfo1\r\n        if(self.lineEditInfo2.hasFocus() == True):\r\n            return self.lineEditInfo2\r\n\r\n    def copyClipboard(self):\r\n        lineEditFocus = self.getFocus()\r\n        text = lineEditFocus.text()\r\n        textCopyOK = pyperclip.copy(text)\r\n\r\n    def cutClipboard(self):\r\n        lineEditFocus = self.getFocus()\r\n        text = lineEditFocus.text()\r\n        textCopyOK = pyperclip.copy(text)\r\n        lineEditFocus.setText(\"\")\r\n\r\n    def pasteClipboard(self):\r\n        lineEditFocus = self.getFocus()\r\n        lineEditFocus.setText(pyperclip.paste())\r\n\r\n    def removeData(self):\r\n        self.a_collection.delete_one({\"_id\": self.lineEdit_1.text()})\r\n        self.updateTable()\r\n    def newWizard(self):\r\n        campo=str(\"Fórmula química\")\r\n        valor=self.lineEditInfo1.text()\r\n        query={campo: valor}\r\n        campo2=str(\"Fórmula química\")\r\n        valor2=self.lineEditInfo2.text()\r\n        query2={campo: valor}\r\n        try:\r\n            for x in self.a_collection.find(query):\r\n                for key, value in x.items():\r\n                    if (key != \"_id\"):\r\n                        if(key==\"Nombre\"):\r\n                            self.Dato1f1=value\r\n                        if(key==\"Tipo\"):\r\n                            self.Dato4f1=value\r\n                        if(key==\"Punto de ebullición\"):\r\n                                    self.Dato5f1=value\r\n                for x in self.a_collection.find(query2):\r\n                        for key, value in x.items():\r\n                            if (key != \"_id\"):\r\n                                if(key==\"Nombre\"):\r\n                                    self.Dato1f2=value\r\n                                if(key==\"Tipo\"):\r\n                                    self.Dato4f2=value\r\n                                if(key==\"Punto de ebullición\"):\r\n                                    self.Dato5f2=value\r\n        except Exception as e:\r\n            raise e\r\n\r\n        self.wizard.activateWindow()\r\n        self.wizard.raise_()\r\n        self.wizard.show()\r\n        self.showMinimized()\r\n\r\n    def insertData(self):\r\n        try:\r\n            self.data_demo = {\"_id\": self.lineEdit_1.text(), \"Nombre\": self.lineEdit_2.text(\r\n            ), \"Fórmula química\": self.lineEdit_1.text(), \"Punto de ebullición\": self.lineEdit_3.text(), \"Tipo\": self.lineEdit_4.text()}\r\n            self.a_collection.insert_one(self.data_demo)\r\n            self.updateTable()\r\n        except:\r\n            print(\"An exception occurred\")\r\n\r\n\r\n    def updateData(self):\r\n        self.a_collection.update_one({\"_id\": self.lineEdit_1.text()},{\"$set\": {\"Nombre\": self.lineEdit_2.text(), \"Fórmula química\": self.lineEdit_1.text(), \"Punto de ebullición\": self.lineEdit_3.text(), \"Tipo\": self.lineEdit_4.text()}})\r\n        self.updateTable()\r\n\r\n    def updateTable(self):\r\n        self.tableFilter.clearContents()\r\n        self.tableEdit.clearContents()\r\n        try:\r\n            iter_length = len([i for i in self.a_collection.find()])\r\n            self.tableEdit.setRowCount(iter_length)\r\n            self.tableFilter.setRowCount(iter_length)\r\n            fila = 0\r\n            columna = 0\r\n            for x in self.a_collection.find():\r\n                for key, value in x.items():\r\n                    if (key != \"_id\"):\r\n                        self.tableEdit.setItem(\r\n                            fila-1, columna, QTableWidgetItem(value))\r\n                        self.tableFilter.setItem(\r\n                            fila-1, columna, QTableWidgetItem(value))\r\n                        columna += 1\r\n                fila += 1\r\n                columna=0\r\n        except Exception as e:\r\n            raise e        \r\n    def filterTable(self):\r\n        self.tableFilter.clearContents()\r\n        fila=0\r\n        columna=0\r\n        campo=str(self.comboBoxFilter.currentText())\r\n        valor=self.lineEditFilter.text()\r\n        query={campo: valor}\r\n        try:\r\n            iter_length=len([i for i in self.a_collection.find()])\r\n            self.tableEdit.setRowCount(iter_length)\r\n            self.tableFilter.setRowCount(iter_length)\r\n            for x in self.a_collection.find(query):\r\n                for key, value in x.items():\r\n                    if (key != \"_id\"):\r\n                        self.tableFilter.setItem(\r\n                            fila, columna, QTableWidgetItem(value))\r\n                        columna += 1\r\n                fila += 1\r\n                columna=0\r\n        except Exception as e:\r\n            raise e\r\n\r\n\r\napp=QApplication(sys.argv)\r\nw=MainWindow()\r\nw.show()\r\napp.exec()\r\n"
    },
    {
      "file": "Chemical_demo.py",
      "selection": {
        "start": {
          "line": 64,
          "character": 9
        },
        "end": {
          "line": 144,
          "character": 1
        }
      },
      "description": "Creo el wizard para relaizar lasistencia de creación del informe.",
      "contents": "import sys\r\nfrom ast import Lambda\r\nfrom datetime import date\r\nfrom pickle import TRUE\r\nfrom tkinter import Button, Spinbox\r\nfrom pathlib import Path\r\nimport sys, os\r\nfrom PySide6.QtCore import QUrl\r\nfrom PySide6.QtWidgets import QApplication, QMainWindow, QPushButton, QWizard, QWizardPage, QLineEdit, QHBoxLayout, QLabel\r\nfrom PySide6.QtWebEngineWidgets import QWebEngineView\r\nfrom PySide6.QtWebEngineCore import QWebEngineSettings\r\nimport numpy as np\r\nimport pyperclip\r\nimport pyqtgraph as pg\r\nimport pyqtgraph.exporters\r\nfrom mongita import MongitaClientDisk\r\n# pdfrw permite leer y extraer páginas de archivos PDF\r\nfrom pdfrw import PdfReader\r\nfrom pdfrw.buildxobj import pagexobj\r\nfrom pdfrw.toreportlab import makerl\r\nfrom pyqtgraph.Qt import QtCore, QtGui\r\nfrom PySide6.QtGui import QPixmap\r\nfrom PySide6.QtWidgets import (QAbstractItemView, QApplication, QCheckBox,\r\n                               QComboBox, QHBoxLayout, QLabel, QLineEdit,\r\n                               QMainWindow, QPushButton, QSpinBox,\r\n                               QTableWidgetItem, QVBoxLayout, QWizard,\r\n                               QWizardPage)\r\nfrom reportlab.pdfgen.canvas import Canvas\r\n\r\nfrom Chemical import Ui_MainWindow\r\n\r\n # reportlab permite la creación de PDF usando texto y primitivas de dibujo\r\n\r\n        # reportlab permite la creación de PDF usando texto y primitivas de dibujo\r\n    # pdfrw permite leer y extraer páginas de archivos PDF\r\n\r\n\r\n\r\nclass MainWindow(QMainWindow, Ui_MainWindow):\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.setupUi(self)\r\n        self.Dato1f1=\"\"\r\n        self.Dato4f1=\"\"\r\n        self.Dato5f1=\"\"\r\n        self.Dato1f2=\"\"\r\n        self.Dato4f2=\"\"\r\n        self.Dato5f2=\"\"\r\n        \r\n        client=MongitaClientDisk()\r\n        my_db=client.b_db\r\n        self.a_collection=my_db.new_collection\r\n        self.actionPaste.triggered.connect(self.pasteClipboard)\r\n        self.actionCopy.triggered.connect(self.copyClipboard)\r\n        self.actionCut.triggered.connect(self.cutClipboard)\r\n        self.ButtonInsert.clicked.connect(self.insertData)\r\n        self.ButtonRemove.clicked.connect(self.removeData)\r\n        self.ButtonRemove.enterEvent=lambda event: self.otherHide()\r\n        self.ButtonRemove.leaveEvent= lambda event: self.otherShow()\r\n        self.ButtonReplace.clicked.connect(self.updateData)\r\n        self.ButtonFilterInfo.clicked.connect(self.filterTable)\r\n        self.tableEdit.setEditTriggers(QAbstractItemView.NoEditTriggers)\r\n        # Wizar\r\n        self.wizard=QWizard()\r\n        next=self.wizard.button(QWizard.NextButton)\r\n        self.buttoMakeInfo.clicked.connect(self.newWizard)\r\n        self.wizard.setWizardStyle(QWizard.ModernStyle)\r\n        self.wizard.setPixmap(QWizard.WatermarkPixmap,QPixmap('Watermark.png'))\r\n        self.wizard.setPixmap(QWizard.LogoPixmap, QPixmap('Logo.png'))\r\n        self.wizard.setPixmap(QWizard.BannerPixmap, QPixmap('Banner.png'))\r\n\r\n        page1=QWizardPage()\r\n        page1.setTitle('Identificación del usuario')\r\n        page1.setSubTitle('Introduzaca su nombre completo')\r\n        lineEdit=QLineEdit()\r\n        label=QLabel()\r\n        label.setText(\"Nombre completo:\")\r\n        hLayout1=QHBoxLayout(page1)\r\n        hLayout1.addWidget(label)\r\n        hLayout1.addWidget(lineEdit)\r\n        page1.registerField('nombre*', lineEdit,lineEdit.text(), 'textChanged')    \r\n        self.wizard.addPage(page1)\r\n     \r\n        page2=QWizardPage()\r\n        page2.setTitle('Generación del identificador')\r\n        page2.setSubTitle( \"Genere su identificador\")\r\n        next.clicked.connect(lambda:page2.setSubTitle(page1.field('nombre')+\" genere su identificador\")) \r\n        next.clicked.connect(lambda:self.asignaNombre(page1.field('nombre')))\r\n\r\n        self.spin=QSpinBox()\r\n        self.check_box=QCheckBox()\r\n        self.combo=QComboBox()\r\n        self.combo.addItem(\"A\")\r\n        self.combo.addItem(\"B\")\r\n        self.combo.addItem(\"C\")\r\n        self.spin.setMaximum(9)\r\n        self.spin.setMinimum(0)\r\n        label1=QLabel()\r\n        label2=QLabel()\r\n        label1.setText(\"Letra de id: \")\r\n        label2.setText(\"Número de id: \")\r\n        hLayout2=QHBoxLayout(page2)\r\n        hLayout2.addWidget(label1)\r\n        hLayout2.addWidget(self.spin)\r\n        hLayout2.addWidget(label2)\r\n        hLayout2.addWidget(self.combo)\r\n        self.wizard.addPage(page2)\r\n        \r\n        page3 = QWizardPage()\r\n        page3.setTitle('Verificación del idntificador')\r\n        page3.setSubTitle('Verifique su id')\r\n        label3=QLabel()\r\n        next.clicked.connect(lambda:label3.setText(\" Su Id generada es: \"+self.combo.currentText()+\"-\"+str(self.spin.value())+\"   ¿Valores correctos?\"))\r\n        next.clicked.connect(lambda:self.setID())\r\n        dateTimeObj = date.today()\r\n        timestampStr = dateTimeObj.strftime(\"%d-%b-%Y\")\r\n        self.fechaFin=timestampStr\r\n        hLayout3=QHBoxLayout(page3)\r\n        hLayout3.addWidget(label3)\r\n        hLayout3.addWidget(self.check_box)\r\n        self.check_box.mousePressEvent= lambda event: self.conectar()\r\n        self.lineEdit_check=QLineEdit()\r\n        hLayout3.addWidget(self.lineEdit_check)\r\n        self.lineEdit_check.hide()\r\n        page3.registerField('campo_check*', self.lineEdit_check)\r\n        self.wizard.addPage(page3)\r\n\r\n        page4 = QWizardPage()\r\n        page4.setTitle('Generar informe')\r\n        page4.setSubTitle('Terminando el proceso')\r\n        label4=QLabel()\r\n        self.label5=QLabel()\r\n        button4=QPushButton(\"Generar Informe\")\r\n        label4.setText(\"Muchas gracias por su colaboración\")\r\n        self.label5.setText(\"\")\r\n        hLayout4=QVBoxLayout(page4)\r\n        hLayout4.addWidget(label4)\r\n        hLayout4.addWidget(self.label5)\r\n        hLayout4.addWidget(button4)\r\n        page4.setFinalPage(True)\r\n        button4.mousePressEvent= lambda event: self.generaInforme()\r\n        finish = self.wizard.button(QWizard.FinishButton)\r\n        self.wizard.addPage(page4)\r\n\r\n        self.updateTable()\r\n    def setID(self):\r\n        item_select=self.combo.currentText()\r\n        spin_selected=self.spin.value()\r\n        self.idFin=item_select+\"-\"+str(spin_selected)\r\n    def  asignaNombre(self,nombre):\r\n        self.nombreFin=nombre\r\n    def generaInforme(self):\r\n        outfile = \"informe.pdf\"\r\n        template = PdfReader(\"template.pdf\", decompress=False).pages[0]\r\n        template_obj = pagexobj(template)\r\n        canvas = Canvas(outfile)\r\n        xobj_name = makerl(canvas, template_obj)\r\n        canvas.doForm(xobj_name)\r\n        #A4 595 x 842 px\r\n        self.formula_filtradaA=self.lineEditInfo1.text()\r\n        self.formula_filtradaB=self.lineEditInfo2.text()\r\n        numCF1=self.count_char(self.formula_filtradaA,'C')\r\n        numHF1=self.count_char(self.formula_filtradaA,'H')\r\n        numCF2=self.count_char(self.formula_filtradaB,'C')\r\n        numHF2=self.count_char(self.formula_filtradaB,'H')\r\n        self.y1=[numCF1]\r\n        self.y2=[numHF1]\r\n        self.y1B=[numCF2]\r\n        self.y2B=[numHF2]\r\n        self.masa_molar_f1=(numCF1*4)+numHF1\r\n        self.masa_molar_f2=(numCF2*4)+numHF2\r\n\r\n        canvas.drawString(318, 660, self.idFin)\r\n        canvas.drawString(170, 603, self.nombreFin)\r\n        canvas.drawString(110, 632, self.fechaFin)\r\n        canvas.drawString(50, 520, self.textEdit.toPlainText())\r\n\r\n        canvas.drawString(355, 418, self.Dato1f1)\r\n        canvas.drawString(400, 391, self.lineEditInfo1.text())\r\n        canvas.drawString(375, 364, str(self.masa_molar_f1))\r\n        canvas.drawString(340, 336, self.Dato4f1)\r\n        canvas.drawString(410, 310, self.Dato5f1)\r\n\r\n        canvas.drawString(355, 273, self.Dato1f2)\r\n        canvas.drawString(400, 245, self.lineEditInfo2.text())\r\n        canvas.drawString(375, 218, str(self.masa_molar_f2))\r\n        canvas.drawString(340, 192, self.Dato4f2)\r\n        canvas.drawString(410, 164, self.Dato5f2)\r\n        canvas.save()\r\n#GRAFICAS###############################################\r\n        win = pg.plot()\r\n        win2=pg.plot()\r\n        win.setWindowTitle('Azul Hidrogeno Rojo Carbono')\r\n        win2.setWindowTitle('Azul Hidrogeno Rojo Carbono')\r\n\r\n        fn = QtGui.QFont()\r\n        fn.setPointSize(15)\r\n        win.getAxis(\"bottom\").setTickFont(fn)\r\n        win.getAxis(\"left\").setTickFont(fn)\r\n        win2.getAxis(\"bottom\").setTickFont(fn)\r\n        win2.getAxis(\"left\").setTickFont(fn)\r\n        x = np.arange(1)\r\n        bg1 = pg.BarGraphItem(x=x, height=self.y1, width=0.6, brush='r')\r\n        bg2= pg.BarGraphItem(x=x+2, height=self.y2, width=0.6, brush='b')\r\n        win.addItem(bg1)\r\n        win.addItem(bg2)\r\n        bg1B = pg.BarGraphItem(x=x, height=self.y1B, width=0.6, brush='r')\r\n        bg2B = pg.BarGraphItem(x=x+2, height=self.y2B, width=0.6, brush='b')\r\n        win2.addItem(bg1B)\r\n        win2.addItem(bg2B)\r\n        plt = win\r\n        pltB = win2\r\n        \r\n        exporter = pg.exporters.ImageExporter(plt.plotItem)\r\n        exporterB = pg.exporters.ImageExporter(pltB.plotItem)\r\n        \r\n        exporter.parameters()['width'] = 170\r\n        exporterB.parameters()['width'] = 170\r\n        exporter.export('graphic.png')\r\n        exporterB.export('graphicB.png')\r\n        outfile = \"informe.pdf\"\r\n        template = PdfReader(\"informe.pdf\", decompress=False).pages[0]\r\n        template_obj = pagexobj(template)\r\n        canvas = Canvas(outfile)\r\n        xobj_name = makerl(canvas, template_obj)\r\n        canvas.doForm(xobj_name)\r\n        canvas.drawImage(\"graphic.png\", 50, 300, width=None,height=None,mask=None)\r\n        canvas.drawImage(\"graphicB.png\", 50, 160, width=None,height=None,mask=None)\r\n\r\n        \r\n        canvas.save()\r\n        self.label5.setText(\"Informe generado con éxito\")\r\n        win.close()\r\n        win2.close()\r\n\r\n\r\n        self.setWindowTitle(\"Mi informe\")\r\n        # QWebEngineView es una vista de una web (vista de un navegador incrustada en una app)\r\n        # Documentación de la clase: https://doc.qt.io/qtforpython/PySide6/QtWebEngineWidgets/QWebEngineView.html\r\n        self.web = QWebEngineView()\r\n        # Para mostrar un PDF, es necesario habilitar los plugins. Los plugins están en https://doc.qt.io/qtforpython/PySide6/QtWebEngineCore/QWebEngineSettings.html#detailed-description\r\n        self.web.settings().setAttribute(QWebEngineSettings.PluginsEnabled, True)\r\n        # Obtenemos la ruta al documento PDF que queremos mostrar (a partir de la carpeta en la que se ejecuta el script)\r\n        #ruta = os.getcwd()\r\n        #rutaConPDF = ruta+\"/template.pdf\"\r\n        # Cargamos el fichero con el protocolo file:// (por eso necesitábamos la ruta completa)\r\n        # Usando http o https también se pueden cargar páginas web\r\n        #self.web.load(QUrl(\"file://\"+rutaConPDF))\r\n        self.setWindowTitle(\"Informe\")\r\n        self.web = QWebEngineView()\r\n        self.web.settings().setAttribute(QWebEngineSettings.PluginsEnabled, True)\r\n        ruta = Path(\"informe.pdf\")\r\n        ruta.absolute().as_uri()\r\n        self.web.load(QUrl(ruta.absolute().as_uri()))\r\n        self.setCentralWidget(self.web)\r\n        self.setCentralWidget(self.web)\r\n\r\n    def count_char(self,formula, char):\r\n        longitud=len(formula)\r\n        count=0\r\n        for  i in range(longitud):\r\n            if(formula[i]==char):\r\n                if(formula[i+1].isdigit() and (i+1)!=longitud):\r\n                    count=count + int(formula[i+1])\r\n                else:\r\n                    count=count + 1\r\n        return count\r\n\r\n\r\n    def conectar(self):\r\n        if(self.check_box.checkState()==False):\r\n            self.check_box.setChecked(True)\r\n            self.lineEdit_check.setText(\"ok\")\r\n        else:\r\n            self.check_box.setChecked(False)\r\n            self.lineEdit_check.setText(\"\")\r\n\r\n    def otherHide(self):\r\n        self.lineEdit_2.hide()\r\n        self.lineEdit_3.hide()\r\n        self.lineEdit_4.hide()\r\n        self.label_field2.hide()\r\n        self.label_field3.hide()\r\n        self.label_field4.setText(\"\")\r\n\r\n    def otherShow(self):\r\n        self.lineEdit_2.show()\r\n        self.label_field2.show()\r\n        self.lineEdit_3.show()\r\n        self.label_field3.show()\r\n        self.lineEdit_4.show()\r\n        self.label_field4.setText(\"Tipo: \")\r\n    def getFocus(self):\r\n        if(self.lineEdit_1.hasFocus() == True):\r\n            return self.lineEdit_1\r\n        if(self.lineEdit_2.hasFocus() == True):\r\n            return self.lineEdit_2\r\n        if(self.lineEdit_3.hasFocus() == True):\r\n            return self.lineEdit_3\r\n        if(self.lineEdit_4.hasFocus() == True):\r\n            return self.lineEdit_4\r\n        if(self.lineEditFilter.hasFocus() == True):\r\n            return self.lineEditFilter\r\n        if(self.lineEditInfo1.hasFocus() == True):\r\n            return self.lineEditInfo1\r\n        if(self.lineEditInfo2.hasFocus() == True):\r\n            return self.lineEditInfo2\r\n\r\n    def copyClipboard(self):\r\n        lineEditFocus = self.getFocus()\r\n        text = lineEditFocus.text()\r\n        textCopyOK = pyperclip.copy(text)\r\n\r\n    def cutClipboard(self):\r\n        lineEditFocus = self.getFocus()\r\n        text = lineEditFocus.text()\r\n        textCopyOK = pyperclip.copy(text)\r\n        lineEditFocus.setText(\"\")\r\n\r\n    def pasteClipboard(self):\r\n        lineEditFocus = self.getFocus()\r\n        lineEditFocus.setText(pyperclip.paste())\r\n\r\n    def removeData(self):\r\n        self.a_collection.delete_one({\"_id\": self.lineEdit_1.text()})\r\n        self.updateTable()\r\n    def newWizard(self):\r\n        campo=str(\"Fórmula química\")\r\n        valor=self.lineEditInfo1.text()\r\n        query={campo: valor}\r\n        campo2=str(\"Fórmula química\")\r\n        valor2=self.lineEditInfo2.text()\r\n        query2={campo: valor}\r\n        try:\r\n            for x in self.a_collection.find(query):\r\n                for key, value in x.items():\r\n                    if (key != \"_id\"):\r\n                        if(key==\"Nombre\"):\r\n                            self.Dato1f1=value\r\n                        if(key==\"Tipo\"):\r\n                            self.Dato4f1=value\r\n                        if(key==\"Punto de ebullición\"):\r\n                                    self.Dato5f1=value\r\n                for x in self.a_collection.find(query2):\r\n                        for key, value in x.items():\r\n                            if (key != \"_id\"):\r\n                                if(key==\"Nombre\"):\r\n                                    self.Dato1f2=value\r\n                                if(key==\"Tipo\"):\r\n                                    self.Dato4f2=value\r\n                                if(key==\"Punto de ebullición\"):\r\n                                    self.Dato5f2=value\r\n        except Exception as e:\r\n            raise e\r\n\r\n        self.wizard.activateWindow()\r\n        self.wizard.raise_()\r\n        self.wizard.show()\r\n        self.showMinimized()\r\n\r\n    def insertData(self):\r\n        try:\r\n            self.data_demo = {\"_id\": self.lineEdit_1.text(), \"Nombre\": self.lineEdit_2.text(\r\n            ), \"Fórmula química\": self.lineEdit_1.text(), \"Punto de ebullición\": self.lineEdit_3.text(), \"Tipo\": self.lineEdit_4.text()}\r\n            self.a_collection.insert_one(self.data_demo)\r\n            self.updateTable()\r\n        except:\r\n            print(\"An exception occurred\")\r\n\r\n\r\n    def updateData(self):\r\n        self.a_collection.update_one({\"_id\": self.lineEdit_1.text()},{\"$set\": {\"Nombre\": self.lineEdit_2.text(), \"Fórmula química\": self.lineEdit_1.text(), \"Punto de ebullición\": self.lineEdit_3.text(), \"Tipo\": self.lineEdit_4.text()}})\r\n        self.updateTable()\r\n\r\n    def updateTable(self):\r\n        self.tableFilter.clearContents()\r\n        self.tableEdit.clearContents()\r\n        try:\r\n            iter_length = len([i for i in self.a_collection.find()])\r\n            self.tableEdit.setRowCount(iter_length)\r\n            self.tableFilter.setRowCount(iter_length)\r\n            fila = 0\r\n            columna = 0\r\n            for x in self.a_collection.find():\r\n                for key, value in x.items():\r\n                    if (key != \"_id\"):\r\n                        self.tableEdit.setItem(\r\n                            fila-1, columna, QTableWidgetItem(value))\r\n                        self.tableFilter.setItem(\r\n                            fila-1, columna, QTableWidgetItem(value))\r\n                        columna += 1\r\n                fila += 1\r\n                columna=0\r\n        except Exception as e:\r\n            raise e        \r\n    def filterTable(self):\r\n        self.tableFilter.clearContents()\r\n        fila=0\r\n        columna=0\r\n        campo=str(self.comboBoxFilter.currentText())\r\n        valor=self.lineEditFilter.text()\r\n        query={campo: valor}\r\n        try:\r\n            iter_length=len([i for i in self.a_collection.find()])\r\n            self.tableEdit.setRowCount(iter_length)\r\n            self.tableFilter.setRowCount(iter_length)\r\n            for x in self.a_collection.find(query):\r\n                for key, value in x.items():\r\n                    if (key != \"_id\"):\r\n                        self.tableFilter.setItem(\r\n                            fila, columna, QTableWidgetItem(value))\r\n                        columna += 1\r\n                fila += 1\r\n                columna=0\r\n        except Exception as e:\r\n            raise e\r\n\r\n\r\napp=QApplication(sys.argv)\r\nw=MainWindow()\r\nw.show()\r\napp.exec()\r\n"
    }
  ]
}